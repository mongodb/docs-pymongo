.. _pymongo-specify-query:

===============
Specify a Query
===============

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: expressions, operations, read, write, filter

Overview
--------

In this guide, you can learn how to specify a query by using {+driver-long+}.

You can refine the set of documents that a query returns by creating a
**query filter**. A query filter is an expression that specifies the search
criteria MongoDB uses to find and match documents in a read or write operation.
In a query filter, you can prompt the driver to search for documents with an
exact match to your query, or you can compose query filters to express more
complex matching criteria.

Sample Data
~~~~~~~~~~~

The examples in this guide use the following documents in a collection called
``fruits``:

.. code-block:: json

   { "_id": 1, "name": "apples", "qty": 5, "rating": 3, "color": "red", "type": ["fuji", "honeycrisp"] },
   { "_id": 2, "name": "bananas", "qty": 7, "rating": 4, "color": "yellow", "type": ["cavendish"] },
   { "_id": 3, "name": "oranges", "qty": 6, "rating": 2, "type": ["naval", "mandarin"] },
   { "_id": 4, "name": "pineapple", "qty": 3, "rating": 5, "color": "yellow" },

The following code example shows how to create a database and collection, and
insert the sample documents into your collection:

.. code-block:: python

   from pymongo import MongoClient

   uri = "<Your Connection URI>"
   client = MongoClient(uri)

   try:
       database = client["sample_fruit"]
       collection = database["fruits"]

       collection.insert_many([
           { "_id": 1, "name": "apples", "qty": 5, "rating": 3, "color": "red", "type": ["fuji", "honeycrisp"] },
           { "_id": 2, "name": "bananas", "qty": 7, "rating": 4, "color": "yellow", "type": ["cavendish"] },
           { "_id": 3, "name": "oranges", "qty": 6, "rating": 2, "type": ["naval", "mandarin"] },
           { "_id": 4, "name": "pineapple", "qty": 3, "rating": 5, "color": "yellow" },
       ])

       client.close()

   except Exception as e:
      raise Exception("Unable to insert the documents due to the following error: ", e)

Exact Match
-----------

Literal value queries return documents with an exact match to your query filter.

The following example specifies a query filter as a parameter to the ``find()``
method. The method finds all documents with a ``color`` field value of ``"yellow"``:

.. code-block::
   :copyable:

   results = collection.find({"color": "yellow"})

.. tip:: Find All Documents

   To find all documents in a collection, call the ``find()`` method without
   passing any arguments. The following example finds all documents in a collection:

   .. code-block:: python

      results = collection.find()

Comparison Operators
--------------------

Comparison operators analyze the value in a document against the specified value
in your query filter. Common comparison operators include:

- Greater than: ``$gt``
- Less than or Equal: ``$lte``
- Not equal: ``$ne``

For a full list of comparison operators, see the :manual:`Comparison Query Operators
</reference/operator/query-comparison/>` guide in the MongoDB Server manual.

The following example specifies a comparison operator in a query filter as a
parameter to the ``find()`` method. The method finds all documents with a
``rating`` field value greater than ``2``:

.. io-code-block::
   :copyable: 

   .. input::
      :language: python

      results = collection.find({"rating": {"$gt" : 2}})

      for f in results:
          print(f) 

   .. output::

      {'_id': 1, 'name': 'apples', 'qty': 5, 'rating': 3, 'color': 'red', 'type': ['fuji', 'honeycrisp']}
      {'_id': 2, 'name': 'bananas', 'qty': 7, 'rating': 4, 'color': 'yellow', 'type': ['cavendish']}
      {'_id': 4, 'name': 'pineapple', 'qty': 3, 'rating': 5, 'color': 'yellow'}

Logical Operators
-----------------

Logical operators match documents using logic applied to the results of two or
more sets of expressions. The following is a list of logical operators: 

- ``$and``, which returns all documents that match the conditions of both clauses
- ``$or``, which returns all documents that match the conditions of either clause
- ``$nor``, which returns all documents that do not match the conditions of either clause
- ``$not``, which returns all documents that do not match the expression

For more information about logical operators, see the :manual:`Logical Query Operators
</reference/operator/query-logical/>` guide in the MongoDB Server manual.

The following example specifies a logical operator in a query filter as a
parameter to the ``find()`` method. The method finds all documents with a
``qty`` field value greater than ``5``, **or** a ``color`` field value of
``"yellow"``:

.. io-code-block::
   :copyable:

   .. input::
      :language: python

      results = collection.find({ 
          "$or": [
                { "qty": { "$gt": 5 }},
                { "color": "yellow" }
          ]
      })

      for f in results:
          print(f)

   .. output::

      {'_id': 2, 'name': 'bananas', 'qty': 7, 'rating': 4, 'color': 'yellow', 'type': ['cavendish']}
      {'_id': 3, 'name': 'oranges', 'qty': 6, 'rating': 2, 'type': ['naval', 'mandarin']}
      {'_id': 4, 'name': 'pineapple', 'qty': 3, 'rating': 5, 'color': 'yellow'}

Array Operators
---------------

Array operators match documents based on the value or quantity of elements in an
array field. The following is a list of array operators:

- ``$all``, which returns documents with arrays that contain all elements in the query
- ``$elemMatch``, which returns documents if an element in their array field matches all conditions in the query
- ``$size``, which returns all documents with arrays of a specified size

For more information about array operators, see the :manual:`Array Query Operators
</reference/operator/query-array/>` guide in the MongoDB Server manual.

The following example specifies an array operator in a query filter as a
parameter to the ``find()`` method. The method finds all documents with a
``type`` array field containing ``2`` elements:

.. io-code-block::
   :copyable:

   .. input::
      :language: python

      results = collection.find({
          "type" : { "$size": 2 }
      })

      for f in results:
          print(f)

   .. output::

      {'_id': 1, 'name': 'apples', 'qty': 5, 'rating': 3, 'color': 'red', 'type': ['fuji', 'honeycrisp']}
      {'_id': 3, 'name': 'oranges', 'qty': 6, 'rating': 2, 'type': ['naval', 'mandarin']}

Element Operators
-----------------

Element operators query data based on the presence or type of a field.

To learn more about element operators, see the :manual:`Element Query Operators
</reference/operator/query-element/>` guide in the MongoDB Server manual.

The following example specifies an element operator in a query filter as a
parameter to the ``find()`` method. The method finds all documents that have a
``color`` field:

.. io-code-block::
   :copyable:

   .. input::
      :language: python

      results = collection.find( {"color" : { "$exists": "true" }} )

      for f in results:
          print(f)

   .. output::

      {'_id': 1, 'name': 'apples', 'qty': 5, 'rating': 3, 'color': 'red', 'type': ['fuji', 'honeycrisp']}
      {'_id': 2, 'name': 'bananas', 'qty': 7, 'rating': 4, 'color': 'yellow', 'type': ['cavendish']}
      {'_id': 4, 'name': 'pineapple', 'qty': 3, 'rating': 5, 'color': 'yellow'}

Evaluation Operators
--------------------

Evaluation operators return data based on evaluations of either individual
fields or the entire collection's documents.

Evaluation operators include:

- ``$text``, which performs a text search on the documents
- ``$regex``, which returns documents that match a specified regular expression
- ``$mod``, which performs a modulo operation on the value of a field and
  returns documents with a specified result

For a full list of evaluation operators, see the :manual:`Evaluation Query Operators
</reference/operator/query-evaluation/>` guide in the MongoDB Server manual.

The following example specifies an evaluation operator in a query filter as a
parameter to the ``find()`` method. The method finds all documents with a
``name`` field that matches the regular expression ``/apple/``:

.. io-code-block::
   :copyable:

   .. input::
      :language: python

      results = collection.find({ "name" : { "$regex" : r"apple" }} )

      for f in results:
          print(f)

   .. output::

      {'_id': 1, 'name': 'apples', 'qty': 5, 'rating': 3, 'color': 'red', 'type': ['fuji', 'honeycrisp']}
      {'_id': 4, 'name': 'pineapple', 'qty': 3, 'rating': 5, 'color': 'yellow'}