.. uses high-availability.rst, tutorial.rst

Making a Connection with MongoClient
------------------------------------
The first step when working with **PyMongo** is to create a
``~pymongo.mongo_client.MongoClient`` to the running **mongod**
instance. Doing so is easy:

.. code-block:: python

  >>> from pymongo import MongoClient
  >>> client = MongoClient()

The above code will connect on the default host and port. We can also
specify the host and port explicitly, as follows:

.. code-block:: python

  >>> client = MongoClient("localhost", 27017)

Or use the MongoDB URI format:

.. code-block:: python

  >>> client = MongoClient("mongodb://localhost:27017/")

Connecting to a Replica Set
---------------------------

PyMongo makes working with `replica sets
<http://dochub.mongodb.org/core/rs>`_ easy. Here we'll launch a new
replica set and show how to handle both initialization and normal
connections with PyMongo.

Starting a Replica Set
~~~~~~~~~~~~~~~~~~~~~~

The main `replica set documentation
<http://dochub.mongodb.org/core/rs>`_ contains extensive information
about setting up a new replica set or migrating an existing MongoDB
setup, be sure to check that out. Here, we'll just do the bare minimum
to get a three node replica set setup locally.

.. warning:: Replica sets should always use multiple nodes in
   production - putting all set members on the same physical node is
   only recommended for testing and development.

We start three ``mongod`` processes, each on a different port and with
a different dbpath, but all using the same replica set name "foo".

.. code-block:: bash

  $ mkdir -p /data/db0 /data/db1 /data/db2
  $ mongod --port 27017 --dbpath /data/db0 --replSet foo

.. code-block:: bash

  $ mongod --port 27018 --dbpath /data/db1 --replSet foo

.. code-block:: bash

  $ mongod --port 27019 --dbpath /data/db2 --replSet foo

Initializing the Set
~~~~~~~~~~~~~~~~~~~~

At this point all of our nodes are up and running, but the set has yet
to be initialized. Until the set is initialized no node will become
the primary, and things are essentially "offline".

To initialize the set we need to connect directly to a single node and run the
initiate command using the ``directConnection`` option:

.. code-block:: python

  >>> from pymongo import MongoClient
  >>> c = MongoClient('localhost', 27017, directConnection=True)

.. note:: We could have connected to any of the other nodes instead,
   but only the node we initiate from is allowed to contain any
   initial data.

After connecting, we run the initiate command to get things started:

.. code-block:: python

  >>> config = {'_id': 'foo', 'members': [
  ...     {'_id': 0, 'host': 'localhost:27017'},
  ...     {'_id': 1, 'host': 'localhost:27018'},
  ...     {'_id': 2, 'host': 'localhost:27019'}]}
  >>> c.admin.command("replSetInitiate", config)
  {'ok': 1.0, ...}

The three ``mongod`` servers we started earlier will now coordinate
and come online as a replica set.

Connecting to a Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The initial connection as made above is a special case for an
uninitialized replica set. Normally we'll want to connect
differently. A connection to a replica set can be made using the
the ``~pymongo.mongo_client.MongoClient`` method constructor, specifying
one or more members of the set and optionally the replica set name.
Any of the following connects to the replica set we just created:

.. code-block:: python

  >>> MongoClient('localhost')
  MongoClient(host=['localhost:27017'], ...)
  >>> MongoClient('localhost', replicaset='foo')
  MongoClient(host=['localhost:27017'], replicaset='foo', ...)
  >>> MongoClient('localhost:27018', replicaset='foo')
  MongoClient(['localhost:27018'], replicaset='foo', ...)
  >>> MongoClient('localhost', 27019, replicaset='foo')
  MongoClient(['localhost:27019'], replicaset='foo', ...)
  >>> MongoClient('mongodb://localhost:27017,localhost:27018/')
  MongoClient(['localhost:27017', 'localhost:27018'], ...)
  >>> MongoClient('mongodb://localhost:27017,localhost:27018/?replicaSet=foo')
  MongoClient(['localhost:27017', 'localhost:27018'], replicaset='foo', ...)

The addresses passed to the ``~pymongo.mongo_client.MongoClient`` method are called
the *seeds*. As long as at least one of the seeds is online, MongoClient
discovers all the members in the replica set, and determines which is the
current primary and which are secondaries or arbiters. Each seed must be the
address of a single mongod. Multihomed and round robin DNS addresses are
**not** supported.

The ``~pymongo.mongo_client.MongoClient`` constructor is non-blocking:
the constructor returns immediately while the client connects to the replica
set using background threads. Note how, if you create a client and immediately
print the string representation of its
``~pymongo.mongo_client.MongoClient.nodes`` attribute, the list may be
empty initially. If you wait a moment, MongoClient discovers the whole replica
set:

.. code-block:: python

  >>> from time import sleep
  >>> c = MongoClient(replicaset='foo'); print(c.nodes); sleep(0.1); print(c.nodes)
  frozenset([])
  frozenset([('localhost', 27019), ('localhost', 27017), ('localhost', 27018)])

You need not wait for replica set discovery in your application, however.
If you need to do any operation with a MongoClient, such as a
the ``~pymongo.collection.Collection.find`` method or an
the ``~pymongo.collection.Collection.insert_one`` method, the client waits to discover
a suitable member before it attempts the operation.

Handling Failover
~~~~~~~~~~~~~~~~~

When a failover occurs, PyMongo will automatically attempt to find the
new primary node and perform subsequent operations on that node. This
can't happen completely transparently, however. Here we'll perform an
example failover to illustrate how everything behaves. First, we'll
connect to the replica set and perform a couple of basic operations:

.. code-block:: python

  >>> db = MongoClient("localhost", replicaSet='foo').test
  >>> db.test.insert_one({"x": 1}).inserted_id
  ObjectId('...')
  >>> db.test.find_one()
  {'x': 1, '_id': ObjectId('...')}

By checking the host and port, we can see that we're connected to
*localhost:27017*, which is the current primary:

.. code-block:: python

  >>> db.client.address
  ('localhost', 27017)

Now let's bring down that node and see what happens when we run our
query again:

.. code-block:: python

  >>> db.test.find_one()
  Traceback (most recent call last):
  pymongo.errors.AutoReconnect: ...

We get an ``~pymongo.errors.AutoReconnect`` exception. This means
that the driver was not able to connect to the old primary (which
makes sense, as we killed the server), but that it will attempt to
automatically reconnect on subsequent operations. When this exception
is raised our application code needs to decide whether to retry the
operation or to simply continue, accepting the fact that the operation
might have failed.

On subsequent attempts to run the query we might continue to see this
exception. Eventually, however, the replica set will failover and
elect a new primary (this should take no more than a couple of seconds in
general). At that point the driver will connect to the new primary and
the operation will succeed:

.. code-block:: python

  >>> db.test.find_one()
  {'x': 1, '_id': ObjectId('...')}
  >>> db.client.address
  ('localhost', 27018)

Bring the former primary back up. It will rejoin the set as a secondary.
Now we can move to the next section: distributing reads to secondaries.