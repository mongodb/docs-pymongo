.. _pymongo-csot:

Limit Server Execution Time
===========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: error, blocking, thread, task

Overview
--------

With {+driver-short+}, you can specify a **client side operation timeout**, a time limit
for server operations to run. The timeout applies all steps needed to complete the
operation, including server selection, connection checkout, serialization, and server-side
execution. When the timeout expires, {+driver-short+} raises a timeout exception.

You can specify a timeout in two ways: by using the ``timeout()`` method or by using
the ``timeoutMS`` connection option.

timeout() Method
----------------

To specify a timeout in your code, call the ``timeout()`` method and pass the timeout
length, in seconds, as an argument. You must call the ``timeout()`` method
in a ``with`` statement, as shown in the following example:

.. code-block:: python

   with pymongo.timeout(10):
       collection.insert_one({"name": "Yngwie"})

In the preceding example, if the insert operation doesn't finish within 10 seconds,
{+driver-short+}, raises an error.

The timeout you specify applies to all operations inside the ``with`` block. In the
following example, the insert and find operations must both finish within a total of
10 seconds:

.. code-block:: python

   with pymongo.timeout(10):
       coll.insert_one({"name": "Yngwie"})
       coll.find_one({"name": "Yngwie"})

Nested Timeout Blocks
~~~~~~~~~~~~~~~~~~~~~

When execution enters a nested ``timeout()`` block, the outer ``timeout()`` deadline is
paused. When execution exits the nested ``timeout()`` block, the previous ``timeout()``
deadline resumes.

The following example shows how nested calls to the ``timeout()`` method interact:

.. code-block:: python

   with pymongo.timeout(5):
       collection.find_one()  # Uses the 5 second deadline
       with pymongo.timeout(3):
           collection.find_one() # Uses the 3 second deadline
       collection.find_one()  # Uses the original 5 second deadline
       with pymongo.timeout(10):
           collection.find_one()  # Still uses the original 5 second deadline
       collection.find_one()  # Uses the original 5 second deadline

Thread and Task Safety
~~~~~~~~~~~~~~~~~~~~~~

The ``timeout()`` method is thread-safe. The timeout applies only to the current
thread, and multiple threads can configure different timeouts in parallel.

The ``timeout()`` method is also ``asyncio``-safe. The timeout applies only to the
current Task, and multiple Tasks can configure different timeouts at the same time.

The following example shows how to use the ``timeout()`` method with
`Motor <https://github.com/mongodb/motor>`__, the MongoDB
Python driver for asynchronous applications: 

.. code-block:: python

   import motor.motor_asyncio
   client = motor.motor_asyncio.AsyncIOMotorClient()
   coll = client.test.test
   with pymongo.timeout(10):
       await coll.insert_one({"name": "Yngwie"})
       await coll.find_one({"name": "Yngwie"})

timeoutMS Connection Option
---------------------------

To specify a timeout when connecting to a MongoDB deployment, set the ``timeoutMS``
connection option to the timeout length, in milliseconds.
You can do this in two ways: by passing an argument to the
``MongoClient`` constructor or through a parameter in your connection string.

The following code examples use the ``timeoutMS`` option to specify a timeout of 10 seconds:

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python
         :emphasize-lines: 2

         client = pymongo.MongoClient("mongodb://<username>:<password>@<hostname@:<port>",
                                      timeoutMS=10000)

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python
         :emphasize-lines: 1

         uri = "mongodb://<username>:<password>@<hostname@:<port>/?timeoutMS=10000"
         client = pymongo.MongoClient(uri)

If you specify the ``timeoutMS`` option, {+driver-short+} automatically applies the
specified timeout to each server operation. The following code examples specify
a timeout of 10 seconds, then call the ``insert_one()`` and
``find_one()`` methods. To see how the ``timeoutMS`` option compares to using the
``timeout()`` method, select the corresponding tab.

.. tabs::

   .. tab:: timeoutMS Option
      :tabid: uri-option

      .. code-block:: python

         uri = "mongodb://<username>:<password>@<hostname@:<port>/?timeoutMS=10000"
         client = pymongo.MongoClient(uri)

         coll = client.test.test
         coll.insert_one({"name": "Yngwie"})  # Uses a 10-second timeout.
         coll.find_one({"name": "Yngwie"})  # Also uses a 10-second timeout.

   .. tab:: timeout Method
      :tabid: method

      .. code-block:: python

         client = MongoClient()
         coll = client.test.test
         with pymongo.timeout(10):
            coll.insert_one({"name": "Yngwie"})
         with pymongo.timeout(10):
            coll.find_one({"name": "Yngwie"})

.. important:: ``timeout()`` Overrides ``timeoutMS``

   If you specify the ``timeoutMS`` option, then call the ``timeout()`` method
   in your code, {+driver-short+} ignores the ``timeoutMS`` value inside the ``timeout``
   block:

   .. code-block:: python

      client = MongoClient("mongodb://localhost/?timeoutMS=10000")
      coll = client.test.test
      coll.insert_one({"name": "Yngwie"})  # Uses the client's 10-second timeout
      # pymongo.timeout overrides the client's timeoutMS.
      with pymongo.timeout(20):
         coll.insert_one({"name": "Yngwie"})  # Uses the 20-second timeout
      with pymongo.timeout(5):
         coll.find_one({"name": "Yngwie"})  # Uses the 5-second timeout

Handling Exceptions
-------------------

When a server operation exceeds the specified timeout, {+driver-short+}
raises a timeout exception. If the exception is the result of a timeout, the
``PyMongoError.timeout`` property is ``True``. Otherwise, it's ``False``.

The following code example shows one way to handle a timeout exception. Inside the
``except`` block, the code checks the ``timeout`` property to determine whether
the exception was caused by a timeout.

.. code-block:: python
   :emphasize-lines: 9-12

   try:
       with pymongo.timeout(10):
           coll.insert_one({"name": "Yngwie"})
           time.sleep(10)
           # The deadline has now expired. The next operation will raise
           # a timeout exception.
           coll.find_one({"name": "Yngwie"})
   except PyMongoError as exc:
       if exc.timeout:
           print(f"block timed out: {exc!r}")
       else:
           print(f"failed with non-timeout error: {exc!r}")

Troubleshooting
---------------

The following sections describe errors you might see when using timeouts.

.. include:: /includes/troubleshooting/csot.rst

API Documentation
-----------------

To learn more about using timeouts in {+driver-short+},
see the following API documentation:

- `MongoClient <{+api-root+}pymongo/mongo_client.html#pymongo.mongo_client.MongoClient>`__ 
- `timeout() <{+api-root+}pymongo/index.html#pymongo.timeout>`__
- `PyMongoError <{+api-root+}pymongo/errors.html#pymongo.errors.PyMongoError>`__ 