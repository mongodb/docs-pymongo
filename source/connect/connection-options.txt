.. _pymongo-connection-options:

==================
Connection Options
==================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: connection string, URI, server, Atlas, settings, configure

Overview
--------

This section describes the MongoDB connection and authentication options
available in {+driver-short+}. You can configure your connection using either
the connection URI or arguments to the ``MongoClient`` constructor.

.. _pymongo-connection-uri:

Using the Connection URI
~~~~~~~~~~~~~~~~~~~~~~~~

If you pass a connection URI to the ``MongoClient`` constructor, you can include
connection options in the string as ``<name>=<value>`` pairs. In the following example,
the connection URI contains the ``connect_timeout`` option with a value of ``60000``
and the ``tls`` option with a value of ``true``:

.. literalinclude:: /includes/connect/local_connection_config.py
   :language: python
   :dedent:
   :start-after: # start local connection config
   :end-before: # end local connection config

.. _pymongo-mongo-client-settings:

Using a ``MongoClient``
~~~~~~~~~~~~~~~~~~~~~~~

You can pass connection options as arguments to the ``MongoClient`` constructor
instead of including them in your connection URI.
Configuring the connection this way makes it easier to
change settings at runtime and helps you catch errors during compilation.
The following example shows how to use the ``MongoClient`` constructor to set
connection options:

.. literalinclude:: /includes/connect/mongoclient_settings_config.py
   :language: python
   :dedent:
   :start-after: # start mongo client settings config
   :end-before: # end mongo client settings config

Connection Options
------------------

The following sections describe the connection options available in {+driver-short+}.
If a ``MongoClient`` parameter maps to more than one
option in the connection string, the **Connection URI Example** shows all
relevant options.

.. todo: .. note::
   If you're using a query parameter for a time duration, the value must be in
   milliseconds. For example, to specify 60 seconds, use the value ``60000``. If you're
   using a ``MongoClientSettings`` object for a time duration, use the appropriate
   ``TimeSpan`` value.

Network Compression
~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Connection Option
     - Description
     
   * - **compressors**
     - | The preferred compression types, in order, for wire-protocol messages sent to
       | or received from the server. The driver uses the first of these compression types
       | that the server supports.
       |
       | **Data Type**: {+string-data-type+}
       | **Default**: ``None``
       | **MongoClient Example**: ``compressors = "snappy,zstd,zlib"``
       | **Connection URI Example**: ``compressors=snappy,zstd,zlib``

   * - **zlibCompressionLevel**
     - | The compression level for zlib to use. This option accepts
       | an integer value between ``-1`` and ``9``:
       | 
       | - **-1:** (Default). zlib uses its default compression level (usually ``6``).
       | - **0:** No compression.
       | - **1:** Fastest speed but lowest compression.
       | - **9:** Best compression but slowest speed.
       |
       | **Data Type**: {+int-data-type+}
       | **Default**: ``-1``
       | **MongoClient Example**: ``zlibCompressionLevel = 3``
       | **Connection URI Example**: ``zlibCompressionLevel=3``

Timeouts
~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Connection Option
     - Description
     
   * - **timeoutMS**
     - | The number of milliseconds each driver operation must complete within. If an
       | operation doesn't finish in the specified time, {+driver-short+} raises a timeout exception.
       | For more information, see :ref:`<pymongo-csot>`.
       |
       | **Data Type**: ``int``
       | **Default**: ``None``
       | **MongoClient Example**: ``timeoutMS = 10000``
       | **Connection URI Example**: ``timeoutMs=10000``
       
Server Selection
~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Connection Option
     - Description

   * - **server_selector**
     - | A user-defined Python function called by {+driver-short+} to choose the server
       | to run an operation against. For more information, see
       | :ref:`<pymongo-server-selection>`.
       |
       | **Data Type**: ``callable``
       | **Default**: ``None``
       | **MongoClient Example**: ``server_selector = your_function``
       | **Connection URI Example**: N/A

Authentication
~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Connection Option
     - Description

   * - **authMechanism**
     - | The mechanism {+driver-short+} uses to authenticate the application. Valid
       | options are defined in `MECHANISMS. <{+api-root+}pymongo/database.html#pymongo.auth.MECHANISMS>`__
       |
       | **Data Type**: {+string-data-type+}
       | **Default**: ``"SCRAM-SHA-256"`` when connecting to MongoDB v4.0 or later.
       | ``"SCRAM-SHA-1"`` when connecting to MongoDB v3.0 through v3.13.
       | **MongoClient Example**: ``authMechanism = "MONGODB-X509"``
       | **Connection URI Example**: ``authMechanism=MONGODB-X509``
  
   * - **authMechanismProperties**
     - | Options specific to the authentication mechanism. Not needed for all authentication
       | mechanisms.
       |
       | **Data Type**: {+string-data-type+}
       | **Default**: ``""``
       | **MongoClient Example**: ``authMechanismProperties = "AWS_SESSION_TOKEN:12345"``
       | **Connection URI Example**: ``authMechanismProperties=AWS_SESSION_TOKEN:12435``

   * - **authSource**
     - | The database to authenticate against.
       |
       | **Data Type**: {+string-data-type+}
       | **Default**: The database in the connection URI, or ``"admin"`` if none is provided
       | **MongoClient Example**: ``authSource = "admin"``
       | **Connection URI Example**: ``authSource=admin``

   * - **username**
     - | The username for authentication. When this option is included in a connection
       | URI, you must percent-escape it.
       |
       | **Data Type**: {+string-data-type+}
       | **Default**: ``""``
       | **MongoClient Example**: ``username = "my user"``
       | **Connection URI Example**: ``username=my+user``

   * - **password**
     - | The password for authentication. When this option is included in a connection
       | URI, you must percent-escape it.
       |
       | **Data Type**: {+string-data-type+}
       | **Default**: ``""``
       | **MongoClient Example**: ``password = "strong password"``
       | **Connection URI Example**: ``password=strong+password``

For more information about the connection option in this section, see :ref:`pymongo-auth`. 

.. _secondary-reads:

Secondary Reads
---------------

By default, an instance of ``MongoClient`` sends queries to
the primary member of the replica set. To use secondary members for queries instead, change
the read preference as shown in the following example:

.. code-block:: python

   >>> client = MongoClient(
   ...     'localhost:27017',
   ...     replicaSet='foo',
   ...     readPreference='secondaryPreferred')
   >>> client.read_preference
   SecondaryPreferred(tag_sets=None)

Now the ``MongoClient`` sends all queries to the secondary members of the replica set. If there are
no secondary members, the client uses the primary member as a fallback. If you have
queries you would prefer to never send to the primary, you can specify that
using the ``secondary`` read preference.

.. _health-monitoring:

Health Monitoring
-----------------

When you initialize a ``MongoClient``, it launches background threads to
monitor the replica set for the following changes:

- Health: Detect when a member goes down or comes up, or if a different member
  becomes primary.
- Configuration: Detect when members are added or removed, and detect changes
  in members' tags.
- Latency: Track a moving average of each member's ping time.

Replica-set monitoring ensures that queries are continually routed to the proper
members as the state of the replica set changes.

.. _mongos-load-balancing:

``mongos`` Load Balancing
-------------------------

You can configure an instance of ``~pymongo.mongo_client.MongoClient``
with a list of ``mongos`` server addresses:

.. code-block:: python

   >> client = MongoClient('mongodb://host1,host2,host3')

Each member of the list must be a single ``mongos`` server. Multi-homed and round
robin DNS addresses are **not** supported. The client continuously
monitors the availability of all ``mongos`` servers. It also monitors its
network latency to each server.

PyMongo distributes operations evenly among the set of ``mongos`` servers within its
``localThresholdMS`` (similar to how it distributes reads to secondaries
in a replica set). By default, the threshold is 15 ms.

The server with the lowest latency, and all servers with latencies no more than
``localThresholdMS`` beyond the server with the lowest latency, receive
operations equally. For example, consider the following three ``mongos`` servers:

- host1: 20 ms
- host2: 35 ms
- host3: 40 ms

By default, the ``localThresholdMS`` is 15 ms, so PyMongo uses "host1" and "host2"
evenly. It uses "host1" because its network latency to the driver is shortest. It
uses "host2" because its latency is within 15 ms of the server with the lowest latency.
PyMongo doesn't use "host3" because its latency is 20 ms beyond the server with the
lowest latency.

To ensure that all servers are within the threshold, set ``localThresholdMS`` to 30
ms as shown in the following example:

.. code-block:: python

   >> client = MongoClient('mongodb://host1,host2,host3/?localThresholdMS=30')

.. warning:: 
  
   Do **not** connect PyMongo to a pool of ``mongos`` instances through a
   load balancer. A single socket connection must always route to the same
   ``mongos`` instance for proper cursor support.