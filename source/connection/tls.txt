.. _pymongo-tls:

=============
Configure TLS 
=============

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: security, authentication, transport layer security, encrypt

Overview
--------

In this guide, you can learn how to use the :wikipedia:`TLS <Transport_Layer_Security>`
protocol to secure your connection to a MongoDB deployment.

When you enable TLS for a connection, {+driver-short+} uses TLS to connect to the
MongoDB deployment, verifies the deployment's certificate, and ensures that the certificate
certifies the deployment {+driver-short+} is connecting to.

To learn more about the connection options in this guide,
see the
`mongo_client <https://pymongo.readthedocs.io/en/latest/api/pymongo/mongo_client.html>`__
API documentation. To learn how to configure your MongoDB deployment for TLS, see the
:manual:`TLS configuration guide </tutorial/configure-ssl/>` in the
MongoDB Server manual. 

.. important::

   A full description of TLS/SSL, PKI (Public Key Infrastructure) certificates, and
   Certificate Authorities (CAs) is beyond the scope of this document. This page assumes prior
   knowledge of TLS/SSL as well as access to valid certificates.

.. _pymongo-enable-tls:

Enable TLS
----------

To enable TLS for the connection to your MongoDB instance, set the ``tls`` connection
option to ``True``. You can do this in two ways: by passing an argument to the
``MongoClient`` constructor or through a parameter in your connection string.

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<username>:<password>@<hostname@:<port>", tls=True)

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<username>:<password>@<hostname>:<port>?tls=true")

.. tip::
   
   If your connection string includes the ``+srv`` modification, which specifies the
   SRV connection format, TLS is enabled on your connection by default.

   To learn more about the SRV connection format, see
   :manual:`<https://www.mongodb.com/docs/manual/reference/connection-string/#srv-connection-format>`
   in the MongoDB Server documentation.

Specify a CA File
------------------

During the TLS handshake, the MongoDB deployment presents a certificate key file to your
application to establish its identity. In most cases, the deployment's certificate has been
signed by a well-known CA, and your application relies on this CA to validate the certificate.

During testing, however, you might want to act as your own CA.
In this case, you must instruct {+driver-short+} to
use your CA certificates instead of ones signed by another CA.

To do so, use the ``tlsCAFile`` connection option to specify the path to a ``.pem`` file
containing the root certificate chain.
You can do this in two ways: by passing an argument to the
``MongoClient`` constructor or through a parameter in your connection string.

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<username>:<password>@<hostname@:<port>",
                                      tls=True,
                                      tlsCAFile="/path/to/ca.pem")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = "mongodb://example.com/?tls=true&tlsCAFile=/path/to/ca.pem"
         client = pymongo.MongoClient(uri)

.. _pymongo-certificate-revocation:

Check Certificate Revocation
----------------------------

When an X.509 certificate is no longer trustworthy--for example, if its private key
has been compromised--the CA revokes the certificate. {+driver-short+} includes two ways
to check whether a server's certificate has been revoked.

OCSP
~~~~

To use the Online Certificate Status Protocol (OCSP) to validate a server certificate,
you must install {+driver-short+} with the ``ocsp`` option, as shown in the following
example:

.. code-block:: python

   python -m pip install pymongo[ocsp]

The certificate-validation process varies depending on the version of MongoDB Server you're
connecting to:

- **MongoDB v4.4 or later:** The server staples a
  time-stamped OCSP response to its certificate. {+driver-short+} validates the certificate
  against the OCSP response. If the CA has revoked the certificate, or if the OCSP response
  is otherwise invalid, the TLs handshake fails.
- **MongoDB v4.3 or earlier:** The server supplies an OCSP endpoint, which {+driver-short+}
  contacts directly. {+driver-short+} then validates the certificate against the OCSP
  response. If the CA hasn't revoked the certificate, the TLS handshake continues--even if
  the OCSP response is invalid or malformed.

Specify a Certificate Revocation List
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To do so, use the ``tlsCAFile`` connection option to specify the path to a ``.pem`` file
containing the root certificate chain.
You can do this in two ways: by passing an argument to the
``MongoClient`` constructor or through a parameter in your connection string.

Instead of using OCSP, you can instruct {+driver-short+} to check the server's certificate
against a Certificate Revocation List (CRL) published by the CA.
To do so, use the ``tlsCRLFile`` connection option to specify the path to a ``.pem``
or ``.der`` file from the CA.
You can do this in two ways: by passing an argument to the
``MongoClient`` constructor or through a parameter in your connection string.

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<username>:<password>@<hostname@:<port>",
                                      tls=True,
                                      tlsCRLFile="/path/to/crl.pem")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = "mongodb://example.com/?tls=true&tlsCRLFile=/path/to/crl.pem"
         client = pymongo.MongoClient(uri)

.. note:: 
  
   You can't use both a CRL and :ref:`OCSP` in the same TLS handshake.

Allow Insecure TLS
------------------

When TLS is enabled, {+driver-short+} automatically verifies the certificate that
the server presents. When testing your code, you can disable this verification.
This is known as *insecure TLS.*

When insecure TLS is enabled, {+driver-short+} requires only that the server present an
X.509 certificate. The driver accepts a certificate even if any of the following are
true: 

- The hostname of the server and the subject name (or subject alternative name) 
  on the certificate don't match.
- The certificate is expired or not yet valid. 
- The certificate doesn't have a trusted root certificate in the chain. 
- The certificate purpose isn't valid for server identification.

.. note::

   Even when insecure TLS is enabled, communication between the client and server
   is encrypted with TLS.

To enable insecure TLS, set the ``tlsInsecure`` connection
option to ``True``. You can do this in two ways: by passing an argument to the
``MongoClient`` constructor or through a parameter in your connection string.

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<username>:<password>@<hostname@:<port>",
                                      tls=True,
                                      tlsInsecure=True)

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = "mongodb://<username>:<password>@<hostname@:<port>/?tls=true&tlsInsecure=true"
         client = pymongo.MongoClient(uri)

To disable only certificate validation, set the ``tlsAllowInvalidCertificates`` option to
``True``, and set the ``tlsInsecure`` option to ``False`` or omit it:

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<username>:<password>@<hostname@:<port>",
                                      tls=True,
                                      tlsAllowInvalidCertificates=True)

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = "mongodb://<username>:<password>@<hostname@:<port>/?tls=true&tlsAllowInvalidCertificates=true"
         client = pymongo.MongoClient(uri)

To disable only hostname verification, set the ``tlsAllowInvalidHostnames`` option to
``True``, and set the ``tlsInsecure`` option to ``False`` or omit it:

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<username>:<password>@<hostname@:<port>",
                                      tls=True,
                                      tlsAllowInvalidHostnames=True)

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = "mongodb://<username>:<password>@<hostname@:<port>/?tls=true&tlsAllowInvalidHostnames=true"
         client = pymongo.MongoClient(uri)

.. warning:: Don't Use in Production

   Always set the ``tlsInsecure``, ``tlsAllowInvalidCertificates``, and
   ``tlsAllowInvalidHostnames`` options to ``False`` in production.
   
   Setting any of these options to ``True`` in a production environment makes
   your application insecure and potentially
   vulnerable to expired certificates and to foreign processes posing
   as valid client instances.

.. _troubleshoot-tls:

Troubleshoot TLS
----------------

TLS errors often fall into three categories: 

- certificate verification failure
- protocol version mismatch 
- certificate revocation checking failure. 

CERTIFICATE_VERIFY_FAILED
~~~~~~~~~~~~~~~~~~~~~~~~~

An error message similar to the following means that OpenSSL couldn't verify the
server's certificate:

.. code-block:: python

   [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed

This often happens because OpenSSL can't access the system's
root certificates, or because the certificates are out of date.

If you use Linux, ensure that you have the latest root certificate updates installed
from your Linux vendor.

If you use macOS, and if you're running Python v3.7 or later that you downloaded
from python.org, run the following command to install
root certificates:

.. code-block:: python

   open "/Applications/Python <YOUR PYTHON VERSION>/Install Certificates.command"

.. tip::
   
   For more information on this issue, see
   `Python issue 29065. <https://bugs.python.org/issue29065#msg283984>`__ 

If you use portable-pypy, you might need to set an environment
variable  to tell
OpenSSL where to find root certificates.
The following code example shows how to install the
`certifi module <https://pypi.org/project/certifi/>`__ from PyPi and
export the ``SSL_CERT_FILE`` environment variable:

.. code-block:: python

   $ pypy -m pip install certifi
   $ export SSL_CERT_FILE=$(pypy -c "import certifi; print(certifi.where())")

.. tip::
   
   For more information on this issue, see
   `portable-pypy issue 15. <https://github.com/squeaky-pl/portable-pypy/issues/15>`__ 

TLSV1_ALERT_PROTOCOL_VERSION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An error message similar to the following means that the OpenSSL
version used by Python doesn't support a new enough TLS protocol to connect
to the server:

.. code-block:: python

   [SSL: TLSV1_ALERT_PROTOCOL_VERSION] tlsv1 alert protocol version

Industry best practices recommend, and some regulations require, that older
TLS protocols be disabled in some MongoDB deployments. Some deployments might
disable TLS 1.0, while others might disable TLS 1.0 and TLS 1.1.

No application changes are required for {+driver-short+} to make use of the newest TLS
versions, but some operating system versions might not provide an OpenSSL version new
enough to support them.

If you use macOS v10.12 (High Sierra) or earlier, install Python from python.org,
homebrew, macports, or a similar source.

If you use Linux or another non-macOS Unix, use the following command to check your OpenSSL
version:

.. code-block:: sh

   $ openssl version

If the preceding command shows a version number less than 1.0.1,
support for TLS 1.1 or newer isn't available.
Upgrade to a newer version or contact your OS vendor for a solution.

To check the TLS version of your Python interpreter, install the ``requests`` module and
execute the following code:

.. code-block:: sh

   python -c "import requests; print(requests.get('https://www.howsmyssl.com/a/check', verify=False).json()['tls_version'])"

You should see TLS 1.1 or later.


Invalid Status Response
~~~~~~~~~~~~~~~~~~~~~~~

An error message similar to the following means that certificate
revocation checking failed:

.. code-block:: python

   [('SSL routines', 'tls_process_initial_server_flight', 'invalid status response')]

For more details, see the :ref:`OCSP <ocsp>` section of this guide.

SSLV3_ALERT_HANDSHAKE_FAILURE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When using Python v3.10 or later with MongoDB versions earlier than v4.0, you might
see errors similar to the following messages:

.. code-block:: python

   SSL handshake failed: localhost:27017: [SSL: SSLV3_ALERT_HANDSHAKE_FAILURE] sslv3 alert handshake failure (_ssl.c:997)
   SSL handshake failed: localhost:27017: EOF occurred in violation of protocol (_ssl.c:997)

The MongoDB Server logs might also show the following error:

.. code-block:: python

   2021-06-30T21:22:44.917+0100 E NETWORK  [conn16] SSL: error:1408A0C1:SSL routines:ssl3_get_client_hello:no shared cipher

`Changes made to the ssl module in Python v3.10
<https://docs.python.org/3/whatsnew/3.10.html#ssl>`__ might cause incompatibilities
with MongoDB versions earlier than v4.0.
The following are some example errors that might occur with this combination:

To resolve this issue, try one or more of the following steps:

- Downgrade Python to v3.9 or earlier
- Upgrade MongoDB Server to v4.2 or later
- Install {+driver-short+} with the :ref:`OCSP <ocsp>` option, which relies on PyOpenSSL