.. _pymongo-certificates:

=============================
Configure Client Certificates 
=============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: security, authentication, transport layer security, tls, ssl, validate, verify

Overview
--------

If a MongoDB deployment is configured to require a client certificate, your application
must prove its identity by including one as a ``.pem`` file when it tries to connect.

To successfully initiate a TLS request to MongoDB, your application must present a
cryptographic certificate, stored as a ``.pem`` file, to prove its identity.

To learn more about configuring a MongoDB Server to require a client certificate,
see :manual:`</tutorial/configure-ssl/#set-up-mongod-and-mongos-with-client-certificate-validation>`
in the MongoDB Server documentation.

Configure a Client Certificate
------------------------------

As part of the TLS handshake, {+driver-short+} can present an X.509 client certificate to
the server. To specify the client certificate for the driver to present, use the
set the ``tlsCertificateKeyFile`` option to the file path of the ``.pem`` file.

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<username>:<password>@<hostname@:<port>",
                                      tls=True,
                                      tlsCertificateKeyFile='/path/to/client.pem')

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = "mongodb://<username>:<password>@<hostname@:<port>/?tls=true&tlsCertificateKeyFile=true"
         client = pymongo.MongoClient(uri)

If the private key for the client certificate is stored in a separate file,
you should concatenate it with the certificate file. For example, to
concatenate a PEM-formatted certificate file named ``cert.pem`` and a PEM-formatted
keyfile named ``key.pem`` into a single file named ``combined.pem``, on Unix systems,
users can run:

.. code-block:: python

   $ cat key.pem cert.pem > combined.pem

If the private key contained in the certificate keyfile is encrypted, users
can provide a password or passphrase to decrypt the encrypted private keys
by using the ``tlsCertificateKeyFilePassword`` option:

.. code-block:: python

   >>> client = pymongo.MongoClient('example.com',
   ...                              tls=True,
   ...                              tlsCertificateKeyFile='/path/to/combined.pem',
   ...                              tlsCertificateKeyFilePassword=<passphrase>)

You can also pass these options as part of the MongoDB URI.

.. important:: 

   When loading a certificate with a password, the certificate object must contain a private 
   key. If it doesn't, your certificate will not be passed to the server.

.. _tls_configure-certificates:

Check Certificate Revocation
----------------------------

When an X.509 certificate should no longer be trusted--for example, if its private key
has been compromised--the certificate authority will revoke the certificate. 

By default, the {+driver-short+} doesn't check whether a server's certificate has been
revoked before it connects. You can enable revocation checking using either 
``MongoClientSettings`` or the connection string.

.. tabs::

   .. tab:: MongoClientSettings
      :tabid: mongoclientsettings

      To enable revocation checking using ``MongoClientSettings``, set 
      ``SslSettings.CheckCertificateRevocation`` to ``true``:

      .. code-block:: csharp
         :emphasize-lines: 5

         var settings = new MongoClientSettings
         {
            SslSettings = new SslSettings
            {
               CheckCertificateRevocation = true
            },
            UseTls = true
         };

   .. tab:: Connection String
      :tabid: connectionstring

      To enable revocation checking using a connection string, 
      assign the connection string parameter ``tlsDisableCertificateRevocationCheck`` 
      a value of ``false``:

      .. code-block:: csharp

         var mongoClient = new MongoClient("mongodb://<username>:<password>@<hostname>:<port>?tls=true&tlsDisableCertificateRevocationCheck=false");

.. note::

   The {+driver-short+} doesn't check revocation by default because this is the default
   behavior of the ``SslStream`` class in both the 
   `{+framework+} <https://learn.microsoft.com/en-us/dotnet/api/system.net.security.sslstream.authenticateasclient?view=netframework-{+framework-version+}#System_Net_Security_SslStream_AuthenticateAsClient_System_String_>`__ 
   and the `.NET standard. <https://learn.microsoft.com/en-us/dotnet/api/system.net.security.sslstream.authenticateasclient?view=netstandard-{+standard-version+}#System_Net_Security_SslStream_AuthenticateAsClient_System_String_>`__

Revocation Checking by Operating System
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The {+driver-short+} supports the following revocation-checking mechanisms differently on 
Windows, macOS, and Linux:

- :wikipedia:`Online Certificate Status Protocol (OCSP) <Online_Certificate_Status_Protocol>`,
  a common mechanism for checking revocation 
- :wikipedia:`OCSP stapling <OCSP_stapling>`, a mechanism in which the server 
  includes a time-stamped OCSP response to the client along with the certificate
- :wikipedia:`Certificate revocation lists (CRLs), <Certificate_revocation_list>`,
  an alternative to OCSP

Windows
```````

On Windows, the {+driver-short+} supports OCSP, OCSP stapling, and CRLs without OCSP,
in both the .NET Framework and .NET Core. 

.. warning:: 
   
   On Windows, the {+driver-short+} will report a "hard fail" and cancel the TLS 
   handshake if the OCSP responder is unavailable. Other operating systems and drivers 
   will report a "soft fail" and continue connecting.

macOS
`````

On macOS, the {+driver-short+} supports OCSP and OCSP stapling. 

Beginning with .NET Core 2.0, the driver does **not** support CRLs without OCSP.

Linux
`````

On Linux, the {+driver-short+} supports OCSP, OCSP stapling, and CRLs without OCSP.
