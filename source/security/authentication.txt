.. _pymongo-auth:

Authentication Mechanisms
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: authorize, boto

Overview
--------

This guide describes the mechanisms you can use in {+driver-short+} to authenticate
users.

.. important:: Percent-Escaping

   You must percent-escape a username and password before including them
   in a MongoDB URI. The ``quote_plus()`` method, available in the 
   `urllib.parse <https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote_plus>`__
   module, is one way to perform this task.

.. _scram_sha_256:

SCRAM-SHA-256
-------------

SCRAM-SHA-256, as defined by `RFC 7677 <https://www.rfc-editor.org/rfc/rfc7677>`__,
is the default authentication mechanism on MongoDB deployments
running MongoDB v4.0 or later.

To authenticate with this mechanism, set the following connection options:

- ``username``: The percent-escaped username to authenticate.
- ``password``: The percent-escaped password.
- ``authSource``: The MongoDB database to authenticate against. By default,
  {+driver-short+} authenticates against the ``admin`` database.
- ``authMechanism``: Set to ``SCRAM-SHA-256``.

You can set these options in two ways: by passing arguments to the
``MongoClient`` constructor or through parameters in your connection string.

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      username="<username>",
                                      password="<password>",
                                      authSource="<authentication database>",
                                      authMechanism="SCRAM-SHA-256")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = ("mongodb://<username>:<password>@<hostname>:<port>/?"
                "authSource=<authentication database>"
                "&authMechanism=SCRAM-SHA-256")
         client = pymongo.MongoClient(uri)

SCRAM-SHA-1
-----------

SCRAM-SHA-1, as defined by `RFC 5802 <https://www.rfc-editor.org/rfc/rfc5802>`__,
is the default authentication mechanism on MongoDB deployments
running MongoDB v3.0 through v3.13.

To authenticate with this mechanism, set the following connection options:

- ``username``: The percent-escaped username to authenticate.
- ``password``: The percent-escaped password.
- ``authSource``: The MongoDB database to authenticate against. By default,
  {+driver-short+} authenticates against the ``admin`` database.
- ``authMechanism``: Set to ``SCRAM-SHA-1``.

You can set these options in two ways: by passing arguments to the
``MongoClient`` constructor or through parameters in your connection string.

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      username="<username>",
                                      password="<password>",
                                      authSource="<authentication database>",
                                      authMechanism="SCRAM-SHA-1")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = ("mongodb://<username>:<password>@<hostname>:<port>/?"
                "authSource=<authentication database>"
                "&authMechanism=SCRAM-SHA-1")
         client = pymongo.MongoClient(uri)

.. tip::
  
   For best performance on Python versions older than 2.7.8, install the
   `backports.pbkdf2 <https://pypi.python.org/pypi/backports.pbkdf2/>`__ package.

.. _mongodb_x509:

MONGODB-X509
------------

If you enable TLS, during the TLS handshake, {+driver-short+} can present an X.509
client certificate to MongoDB to prove its identity. The MONGODB-X509 authentication
mechanism uses this certificate to authenticate the client.

To authenticate with this mechanism, set the following connection options:

- ``tls``: Set to ``True``.
- ``tlsCertificateKeyFile``: The file path of the ``.pem`` file that contains your
  client certificate and private key.
- ``authMechanism``: Set to ``MONGODB-X509``.

You can set these options in two ways: by passing arguments to the
``MongoClient`` constructor or through parameters in your connection string.

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      tls=True,
                                      tlsCertificateKeyFile="/path/to/client.pem",
                                      authMechanism="MONGODB-X509")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = ("mongodb://<hostname>:<port>/?"
                "tls=true"
                "&tlsCertificateKeyFile=path/to/client.pem"
                "&authMechanism=MONGODB-X509")
         client = pymongo.MongoClient(uri)

.. note:: Authentication Database
   
   You don't have to specify an authentication database because MONGODB-X509 authenticates
   against the ``$external`` virtual database. 

.. _mongodb-aws:

MONGODB-AWS
-----------

.. note::

   The MONGODB-AWS authentication mechanism is available in MongoDB v4.4 and later.

The MONGODB-AWS authentication mechanism uses AWS IAM (Amazon Web Services Identity and
Access Management) or AWS Lambda credentials to authenticate.

To use the Online Certificate Status Protocol (OCSP) to validate a server certificate,
you must install {+driver-short+} with the ``ocsp`` option, as shown in the following
example:

To use MONGODB-AWS for authentication, you must install {+driver-short+} with the
``aws`` option, as shown in the following example:

.. code-block:: sh

   python -m pip install pymongo[aws]

- AWS IAM credentials (an access key ID and a secret access key)
- `Temporary AWS IAM credentials <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html>`__ obtained
from an `AWS Security Token Service (STS) <https://docs.aws.amazon.com/STS/latest/APIReference/Welcome.html>`__
`Assume Role <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html>`__
request
- AWS Lambda `environment variables <https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime>`__,
- Temporary AWS IAM credentials assigned to an
`EC2 instance <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html>`__
or ECS task.

The use of temporary credentials, in
addition to an access key ID and a secret access key, also requires a
security (or session) token.



You can configure credentials by using the MongoDB URI, environment variables,
or the local EC2 or ECS endpoint. The order in which the client searches for
`credentials <https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html>`__
is the same as the one used by the AWS ``boto3`` library when using
``pymongo_auth_aws`` >= 1.1.0.

If you are using ``boto3`` to handle credentials, any shared AWS credentials or config
file you have will be used by default if AWS auth environment
variables are not set.  To override this behavior, set
``AWS_SHARED_CREDENTIALS_FILE=""`` in your shell, or add
``os.environ["AWS_SHARED_CREDENTIALS_FILE"] = ""`` to your script or
application.  Alternatively, you can create an AWS profile specifically for
your MongoDB credentials and set ``AWS_PROFILE`` to that profile name.

.. note::

   MONGODB-AWS authenticates against the ``$external``" virtual database, so none of
   the URIs in this section must include the ``authSource`` URI option.

AWS IAM credentials
~~~~~~~~~~~~~~~~~~~

Applications can use AWS IAM credentials to authenticate by providing a valid
access key ID and secret access key pair as the username and password,
respectively, in the MongoDB URI:

.. code-block:: python
   :emphasize-lines: 2

   >>> from pymongo import MongoClient
   >>> uri = "mongodb+srv://<access_key_id>:<secret_access_key>@example.mongodb.net/?authMechanism=MONGODB-AWS"
   >>> client = MongoClient(uri)

.. important::
  
   You must percent-escape the ``access_key_id`` and ``secret_access_key`` before including
   them in the URI.

Temporary AWS IAM Credentials from AssumeRole
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Applications can authenticate themselves by using temporary credentials returned from an
``AssumeRole`` request. These temporary credentials include an access key
ID, a secret access key, and a security token passed into the URI. The following example
shows how to include these values in your MongoDB URI:

.. code-block:: python
   :emphasize-lines: 2

  >>> from pymongo import MongoClient
  >>> uri = "mongodb+srv://<access_key_id>:<secret_access_key>@example.mongodb.net/?authMechanism=MONGODB-AWS&authMechanismProperties=AWS_SESSION_TOKEN:<session_token>"
  >>> client = MongoClient(uri)

.. important::
  
   You must percent-escape the ``access_key_id``, ``secret_access_key``, and ``session_token``
   before including them in the URI.

AWS Lambda (Environment Variables)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you use the MONGODB-AWS authentication mechanism but don't provide a username and password,
the client will fall back to using the environment variables
``AWS_ACCESS_KEY_ID``, ``AWS_SECRET_ACCESS_KEY``, and ``AWS_SESSION_TOKEN``
for the access key ID, secret access key, and session token, respectively:

.. code-block:: python

   $ export AWS_ACCESS_KEY_ID=<access_key_id>
   $ export AWS_SECRET_ACCESS_KEY=<secret_access_key>
   $ export AWS_SESSION_TOKEN=<session_token>
   $ python
   >>> from pymongo import MongoClient
   >>> uri = "mongodb+srv://example.mongodb.net/?authMechanism=MONGODB-AWS"
   >>> client = MongoClient(uri)

.. note::
  
   When using environment variables for authentication,
   don't include the username, password, or session token in your URI. 
   Do not percent-escape the values in these environment variables.

.. _EKS Clusters:

EKS Clusters
~~~~~~~~~~~~

If your application
`authenticates users for your cluster from an OpenID Connect identity provider, <https://docs.aws.amazon.com/eks/latest/userguide/authenticate-oidc-identity-provider.html>`__
you can use the provided credentials by giving the associated IAM User
`sts:AssumeRoleWithWebIdentity <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html>`__
permission.

The driver uses an ``AssumeRoleWithWebIdentity`` call to retrieve temporary credentials
if the following criteria are met:

- You specify the MONGODB-AWS authentication mechanism.
- You don't provide a username and password.
- The ``AWS_WEB_IDENTITY_TOKEN_FILE``, ``AWS_ROLE_ARN``, and
  optional ``AWS_ROLE_SESSION_NAME`` environment variables are set.
- The application is using ``pymongo_auth_aws`` >= 1.1.0 for EKS support.

ECS Container
~~~~~~~~~~~~~

Applications can authenticate from an ECS container by using temporary
credentials assigned to the machine. The following example shows a sample URI on an ECS
container:

.. code-block:: python

   >>> from pymongo import MongoClient
   >>> uri = "mongodb+srv://example.mongodb.com/?authMechanism=MONGODB-AWS"
   >>> client = MongoClient(uri)

.. note::
  
   When using an ECS container for authentication, don't include the username, password,
   or session token in the URI.
   {+driver-short+} queries the ECS container endpoint to obtain these credentials.

EC2 Instance
~~~~~~~~~~~~

Applications can authenticate from an EC2 instance by using temporary
credentials assigned to the machine. The following example shows a sample URI on an EC2
machine:

.. code-block:: python

   >>> from pymongo import MongoClient
   >>> uri = "mongodb+srv://example.mongodb.com/?authMechanism=MONGODB-AWS"
   >>> client = MongoClient(uri)

.. note::
  
   When using an EC2 instance for authentication, don't include the username, password,
   or session token in the URI.
   {+driver-short+} queries the ECS container endpoint to obtain these credentials.
