.. _pymongo-auth:

Authentication Mechanisms
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: authorize, boto

Overview
--------

This guide describes the mechanisms you can use in {+driver-short+} to authenticate
users.

.. important:: Percent-Escaping

   You must percent-escape a username and password before including them
   in a MongoDB URI. The ``quote_plus()`` method, available in the 
   `urllib.parse <https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote_plus>`__
   module, is one way to perform this task.

.. _scram_sha_256:

SCRAM-SHA-256
-------------

SCRAM-SHA-256, as defined by `RFC 7677 <https://www.rfc-editor.org/rfc/rfc7677>`__,
is the default authentication mechanism on MongoDB deployments
running MongoDB v4.0 or later.

To authenticate with this mechanism, set the following connection options:

- ``username``: The percent-escaped username to authenticate.
- ``password``: The percent-escaped password.
- ``authSource``: The MongoDB database to authenticate against. By default,
  {+driver-short+} authenticates against the ``admin`` database.
- ``authMechanism``: Set to ``SCRAM-SHA-256``.

You can set these options in two ways: by passing arguments to the
``MongoClient`` constructor or through parameters in your connection string.

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      username="<username>",
                                      password="<password>",
                                      authSource="<authentication database>",
                                      authMechanism="SCRAM-SHA-256")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = ("mongodb://<username>:<password>@<hostname>:<port>/?"
                "authSource=<authentication database>"
                "&authMechanism=SCRAM-SHA-256")
         client = pymongo.MongoClient(uri)

SCRAM-SHA-1
-----------

SCRAM-SHA-1, as defined by `RFC 5802 <https://www.rfc-editor.org/rfc/rfc5802>`__,
is the default authentication mechanism on MongoDB deployments
running MongoDB v3.0 through v3.13.

To authenticate with this mechanism, set the following connection options:

- ``username``: The percent-escaped username to authenticate.
- ``password``: The percent-escaped password.
- ``authSource``: The MongoDB database to authenticate against. By default,
  {+driver-short+} authenticates against the ``admin`` database.
- ``authMechanism``: Set to ``SCRAM-SHA-1``.

You can set these options in two ways: by passing arguments to the
``MongoClient`` constructor or through parameters in your connection string.

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      username="<username>",
                                      password="<password>",
                                      authSource="<authentication database>",
                                      authMechanism="SCRAM-SHA-1")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = ("mongodb://<username>:<password>@<hostname>:<port>/?"
                "authSource=<authentication database>"
                "&authMechanism=SCRAM-SHA-1")
         client = pymongo.MongoClient(uri)

.. tip::
  
   For best performance on Python versions older than 2.7.8, install the
   `backports.pbkdf2 <https://pypi.python.org/pypi/backports.pbkdf2/>`__ package.

.. _mongodb_x509:

MONGODB-X509
------------

If you enable TLS, during the TLS handshake, {+driver-short+} can present an X.509
client certificate to MongoDB to prove its identity. The MONGODB-X509 authentication
mechanism uses this certificate to authenticate the client.

To authenticate with this mechanism, set the following connection options:

- ``tls``: Set to ``True``.
- ``tlsCertificateKeyFile``: The file path of the ``.pem`` file that contains your
  client certificate and private key.
- ``authMechanism``: Set to ``MONGODB-X509``.

You can set these options in two ways: by passing arguments to the
``MongoClient`` constructor or through parameters in your connection string.

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      tls=True,
                                      tlsCertificateKeyFile="/path/to/client.pem",
                                      authMechanism="MONGODB-X509")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = ("mongodb://<hostname>:<port>/?"
                "tls=true"
                "&tlsCertificateKeyFile=path/to/client.pem"
                "&authMechanism=MONGODB-X509")
         client = pymongo.MongoClient(uri)

.. note:: Authentication Database
   
   You don't have to specify an authentication database because MONGODB-X509 authenticates
   against the ``$external`` virtual database. 

.. _mongodb-aws:

MONGODB-AWS
-----------

.. note::

   The MONGODB-AWS authentication mechanism is available in MongoDB v4.4 and later.

The MONGODB-AWS authentication mechanism uses AWS IAM (Amazon Web Services Identity and
Access Management) or AWS Lambda credentials to authenticate. To use MONGODB-AWS for
authentication, you must install {+driver-short+} with the
``aws`` option, as shown in the following example:

.. code-block:: sh

   python -m pip install pymongo[aws]

{+driver-short+} uses Boto3, the AWS SDK for Python, to handle credentials. For this
reason, {+driver-short+} uses the same search order as Boto3 when searching for
AWS credentials:

1. AWS IAM credentials passed explicitly to the ``MongoClient`` constructor, either as
   named arguments or in the connection URI
#. Environment variables (AWS Lambda)
#. Shared credentials file
#. AWS config file
#. Temporary credentials from an AssumeRole provider (AWS Security Token Service (STS)
#. Instance metadata service on an Amazon EC2 instance with an IAM role configured

The following sections describe how to use these types of AWS credentials to
authenticate your application.

.. TODO: Any shared AWS credentials or config
   file you have will be used by default if AWS auth environment
   variables are not set.  To override this behavior, set
   ``AWS_SHARED_CREDENTIALS_FILE=""`` in your shell, or add
   ``os.environ["AWS_SHARED_CREDENTIALS_FILE"] = ""`` to your script or
   application.  Alternatively, you can create an AWS profile specifically for
   your MongoDB credentials and set ``AWS_PROFILE`` to that profile name.

.. note:: Authentication Database
   
   You don't have to specify an authentication database because MONGODB-AWS authenticates
   against the ``$external`` virtual database. 

Pass AWS IAM Credentials to ``MongoClient``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

First, {+driver-short+} checks whether you explicitly provided AWS IAM credentials
when you created your ``MongoClient`` object. To pass credentials to ``MongoClient``,
set the following connection options:

- ``username``: The percent-escaped AWS IAM access key ID to authenticate.
- ``password``: The percent-escaped AWS IAM secret access key.
- ``authMechanism``: Set to ``MONGODB-AWS``.

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://@<hostname>:<port>",
                                      username="<AWS IAM access key ID>",
                                      password="<AWS IAM secret access key>",
                                      authMechanism="MONGODB-AWS")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = ("mongodb://<AWS IAM access key ID>:<AWS IAM secret access key>@<hostname>:<port>/?"
                "&authMechanism=MONGODB-AWS")
         client = pymongo.MongoClient(uri)

Environment Variables
~~~~~~~~~~~~~~~~~~~~~

If you don't provide a username and password when you construct your ``MongoClient``
object, {+driver-short+} tries to retrieve AWS credentials from the following
environment variables:

- ``AWS_ACCESS_KEY_ID``
- ``AWS_SECRET_ACCESS_KEY``
- ``AWS_SESSION_TOKEN``

This mechanism is commonly used in AWS Lambda environments.

To use these environment variables to authenticate your application, first set them to the
AWS IAM values needed for authentication, as shown in the following code example:

.. code-block:: sh

   export AWS_ACCESS_KEY_ID=<AWS IAM access key ID>
   export AWS_SECRET_ACCESS_KEY=<AWS IAM secret access key>
   export AWS_SESSION_TOKEN=<AWS session token>

.. important::
  
   Don't percent-escape the values in these environment variables.

After you set the previous environment variables, set the ``authMechanism``
connection option to ``MONGODB-AWS``.

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      authMechanism="MONGODB-AWS")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = "mongodb://<hostname>:<port>/?&authMechanism=MONGODB-AWS"
         client = pymongo.MongoClient(uri)

.. note::
   
   For more information about using environment variables in an AWS Lambda environment,
   see `Using Lambda environment variables <https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime>`__
   in the AWS documentation.

Shared Credentials File
~~~~~~~~~~~~~~~~~~~~~~~

If you don't set the preceding environment variables, {+driver-short+}
tries to retrieve AWS credentials from a shared credentials file.

To use a shared credentials file to authenticate your application, first ensure the
file exists in your environment. To learn more about the
default location and format of a shared credentials file, see
`Credentials <https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html#shared-credentials-file>`__
in the Boto3 documentation.

After you create the shared credentials file, set the ``authMechanism``
connection option to ``MONGODB-AWS``.

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      authMechanism="MONGODB-AWS")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = "mongodb://<hostname>:<port>/?&authMechanism=MONGODB-AWS"
         client = pymongo.MongoClient(uri)

AWS Config File
~~~~~~~~~~~~~~~

If {+driver-short+} doesn't find a shared credentials file, it tries to retrieve
credentials from an AWS config file.

To use an AWS config file to authenticate your application, first ensure the
file exists in your environment. To learn more about the
default location and format of an AWS config file, see
`Credentials <https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html#aws-config-file>`__
in the Boto3 documentation.

After you create the config file, set the ``authMechanism`` connection option to
``MONGODB-AWS``.

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      authMechanism="MONGODB-AWS")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = "mongodb://<hostname>:<port>/?&authMechanism=MONGODB-AWS"
         client = pymongo.MongoClient(uri)

AssumeRole Request
~~~~~~~~~~~~~~~~~~

Instead of including AWS credentials in your AWS config file, you can use the file to
instruct Boto3 to assume a role. If you do, Boto3 makes an
``AssumeRole`` request to an AWS STS (Security Token Service) endpoint, which returns
the credentials your application needs for authentication.

To authenticate with temporary AWS IAM credentials returned by an AssumeRole request,
first ensure your AWS config file
exists in your environment and is configured correctly.
To learn more about the
default location and format of a shared credentials file, see
`Credentials <https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html#assume-role-provider>`__
in the Boto3 documentation.

After you create the config file, set the following connection options:

- ``username``: The percent-escaped AWS IAM access key ID to authenticate. The
  AssumeRole request returns this access key ID, but you must percent-escape it.
- ``password``: The percent-escaped AWS IAM secret access key. The AssumeRole request
  returns this access key, but you must percent-escape it.
- ``authMechanismProperties``: Set to ``AWS_SESSION_TOKEN:`` and the percent-escaped
  AWS session token. The AssumeRole request returns this session token, but you must
  percent-escape it.
- ``authMechanism``: Set to ``MONGODB-AWS``.

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://@<hostname>:<port>",
                                      username="<AWS IAM access key ID>",
                                      password="<AWS IAM secret access key>",
                                      authMechanismProperties="AWS_SESSION_TOKEN:<AWS session token>",
                                      authMechanism="MONGODB-AWS")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = ("mongodb://<AWS IAM access key ID>:<AWS IAM secret access key>@<hostname>:<port>/?"
                "authMechanismProperties=AWS_SESSION_TOKEN:<AWS session token>"
                "&authMechanism=MONGODB-AWS")
         client = pymongo.MongoClient(uri)

.. note::
   
   For more information about using the ``AssumeRole`` request to authenticate your
   application, see the following AWS documentation:
   
   - `Temporary AWS IAM credentials <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html>`__
   - `AWS Security Token Service (STS) <https://docs.aws.amazon.com/STS/latest/APIReference/Welcome.html>`__
   - `Assume Role <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html>`__

.. _EKS Clusters:

EKS Clusters / AssumeRoleWithWebIdentity
~~~~~~~~~~~~

.. important::
   
   Your application must use ``pymongo_auth_aws`` v1.1.0 or later for EKS support.

If your application
`authenticates users for your cluster from an OpenID Connect identity provider, <https://docs.aws.amazon.com/eks/latest/userguide/authenticate-oidc-identity-provider.html>`__
you can use the provided credentials by giving the associated IAM User
`sts:AssumeRoleWithWebIdentity <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html>`__
permission.

To instruct {+driver-short+} to make an ``AssumeRoleWithWebIdentity`` request, 
set the following environment variables:

- ``AWS_WEB_IDENTITY_TOKEN_FILE``: The absolute path to the file that contains your OIDC
  token.
- ``AWS_ROLE_ARN``: The ARN of the role to assume.
- ``AWS_ROLE_SESSION_NAME``: Optional. A name for the AWS session. If you don't specify
  a value for this variable, Boto3 generates one automatically.

The following code example shows how to use the terminal to set the preceding environment
variables:

.. code-block:: sh

   export AWS_WEB_IDENTITY_TOKEN_FILE=<OIDC file path>
   export AWS_ROLE_ARN=<role ARN>
   export AWS_ROLE_SESSION_NAME=<session name>

.. important::
  
   Don't percent-escape the values in these environment variables.

After you set the previous environment variables, set the following connection options:

- ``authMechanism``: Set to ``MONGODB-AWS``.

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      authMechanism="MONGODB-AWS")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = "mongodb://<hostname>:<port>/?&authMechanism=MONGODB-AWS"
         client = pymongo.MongoClient(uri)

ECS Container
~~~~~~~~~~~~~

- Temporary AWS IAM credentials assigned to an
`EC2 instance <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html>`__
or ECS task.

Applications can authenticate from an ECS container by using temporary
credentials assigned to the machine. The following example shows a sample URI on an ECS
container:

.. code-block:: python

   >>> from pymongo import MongoClient
   >>> uri = "mongodb+srv://example.mongodb.com/?authMechanism=MONGODB-AWS"
   >>> client = MongoClient(uri)

.. note::
  
   When using an ECS container for authentication, don't include the username, password,
   or session token in the URI.
   {+driver-short+} queries the ECS container endpoint to obtain these credentials.

EC2 Instance
~~~~~~~~~~~~

Applications can authenticate from an EC2 instance by using temporary
credentials assigned to the machine. The following example shows a sample URI on an EC2
machine:

.. code-block:: python

   >>> from pymongo import MongoClient
   >>> uri = "mongodb+srv://example.mongodb.com/?authMechanism=MONGODB-AWS"
   >>> client = MongoClient(uri)

.. note::
  
   When using an EC2 instance for authentication, don't include the username, password,
   or session token in the URI.
   {+driver-short+} queries the ECS container endpoint to obtain these credentials.
