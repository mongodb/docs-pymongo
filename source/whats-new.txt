.. uses changelog.rst

.. _pymongo-whats-new:

What's New
==========

Changes in Version 4.7
------------------------

PyMongo 4.7 brings a number of improvements including:

- Added the ``~pymongo.hello.Hello.server_connection_id``,
  ``pymongo.monitoring.CommandStartedEvent.server_connection_id``,
  ``pymongo.monitoring.CommandSucceededEvent.server_connection_id``, and
  ``pymongo.monitoring.CommandFailedEvent.server_connection_id`` properties.
- Fixed a bug where inflating a ``~bson.raw_bson.RawBSONDocument`` containing a ``~bson.code.Code`` would cause an error.
- Significantly improved the performance of encoding BSON documents to JSON.
- Support for named KMS providers for client side field level encryption.
  Previously supported KMS providers were only: aws, azure, gcp, kmip, and local.
  The KMS provider is now expanded to support name suffixes (e.g. local:myname).
  Named KMS providers enables more than one of each KMS provider type to be configured.
  See the docstring for ``~pymongo.encryption_options.AutoEncryptionOpts``.
  Note that named KMS providers requires pymongocrypt >=1.9 and libmongocrypt >=1.9.
- the ``~pymongo.encryption.ClientEncryption.encrypt`` method and
  the ``~pymongo.encryption.ClientEncryption.encrypt_expression`` method now allow ``key_id``
  to be passed in as a ``uuid.UUID``.
- Fixed a bug where ``~bson.int64.Int64`` instances could not always be encoded by `orjson`_. The following now
  works:

.. code-block:: python

    >>> import orjson
    >>> from bson import json_util
    >>> orjson.dumps({'a': Int64(1)}, default=json_util.default, option=orjson.OPT_PASSTHROUGH_SUBCLASS)

.. _orjson: https://github.com/ijl/orjson

- Fixed a bug appearing in Python 3.12 where "RuntimeError: can't create new thread at interpreter shutdown"
  could be written to stderr when a MongoClient's thread starts as the python interpreter is shutting down.

Unavoidable breaking changes
............................

- Replaced usage of ``bson.son.SON`` on all internal classes and commands to dict,
  ``options.pool_options.metadata`` is now of type ``dict`` as opposed to ``bson.son.SON``.
  Here's some examples of how this changes expected output as well as how to convert from ``dict`` to ``bson.son.SON``:

.. code-block:: python

    # Before
    >>> from pymongo import MongoClient
    >>> client = MongoClient()
    >>> client.options.pool_options.metadata
    SON([('driver', SON([('name', 'PyMongo'), ('version', '4.7.0.dev0')])), ('os', SON([('type', 'Darwin'), ('name', 'Darwin'), ('architecture', 'arm64'), ('version', '14.3')])), ('platform', 'CPython 3.11.6.final.0')])

    # After
    >>> client.options.pool_options.metadata
    {'driver': {'name': 'PyMongo', 'version': '4.7.0.dev0'}, 'os': {'type': 'Darwin', 'name': 'Darwin', 'architecture': 'arm64', 'version': '14.3'}, 'platform': 'CPython 3.11.6.final.0'}

    # To convert from dict to SON
    # This will only convert the first layer of the dictionary
    >>> data_as_dict = client.options.pool_options.metadata
    >>> SON(data_as_dict)
    SON([('driver', {'name': 'PyMongo', 'version': '4.7.0.dev0'}), ('os', {'type': 'Darwin', 'name': 'Darwin', 'architecture': 'arm64', 'version': '14.3'}), ('platform', 'CPython 3.11.6.final.0')])

    # To convert from dict to SON on a nested dictionary
    >>> def dict_to_SON(data_as_dict: dict[Any, Any]):
    ...     data_as_SON = SON()
    ...     for key, value in data_as_dict.items():
    ...         data_as_SON[key] = dict_to_SON(value) if isinstance(value, dict) else value
    ...     return data_as_SON
    >>>
    >>> dict_to_SON(data_as_dict)
    SON([('driver', SON([('name', 'PyMongo'), ('version', '4.7.0.dev0')])), ('os', SON([('type', 'Darwin'), ('name', 'Darwin'), ('architecture', 'arm64'), ('version', '14.3')])), ('platform', 'CPython 3.11.6.final.0')])

Changes in Version 4.6.1
------------------------

PyMongo 4.6.1 fixes the following bug:

- Ensure retryable read ``OperationFailure`` errors re-raise exception when 0 or NoneType error code is provided.

Changes in Version 4.6
----------------------

PyMongo 4.6 brings a number of improvements including:

- Added the ``serverMonitoringMode`` URI and keyword argument to ``~pymongo.mongo_client.MongoClient``.
- Improved client performance and reduced connection requirements in Function-as-a-service (FaaS)
  environments like AWS Lambda, Google Cloud Functions, and Microsoft Azure Functions.
- Added the ``pymongo.monitoring.CommandSucceededEvent.database_name`` property.
- Added the ``pymongo.monitoring.CommandFailedEvent.database_name`` property.
- Allow passing a ``dict`` to sort/create_index/hint.
- Added ``repr`` support to the write result classes:
  ``~pymongo.results.BulkWriteResult``,
  ``~pymongo.results.DeleteResult``,
  ``~pymongo.results.InsertManyResult``,
  ``~pymongo.results.InsertOneResult``,
  ``~pymongo.results.UpdateResult``, and
  ``~pymongo.encryption.RewrapManyDataKeyResult``. For example:

.. code-block:: python
   
   >>> client.t.t.insert_one({})
   InsertOneResult(ObjectId('65319acdd55bb3a27ab5502b'), acknowledged=True)
   >>> client.t.t.insert_many([{} for _ in range(3)])
   InsertManyResult([ObjectId('6532f85e826f2b6125d6ce39'), ObjectId('6532f85e826f2b6125d6ce3a'), ObjectId('6532f85e826f2b6125d6ce3b')], acknowledged=True)

- the ``~pymongo.uri_parser.parse_uri`` method now considers the delimiting slash (``/``)
  between hosts and connection options optional. For example,
  "mongodb://example.com?tls=true" is now a valid URI.
- Fixed a bug where PyMongo would incorrectly promote all cursors to exhaust cursors
  when connected to load balanced MongoDB clusters or Serverless clusters.
- Added the :ref:`network-compression-example` documentation page.
- Added more timeout information to network errors.

Changes in Version 4.5
----------------------

PyMongo 4.5 brings a number of improvements including:

- Added new helper methods for Atlas Search Index (requires MongoDB Server 7.0+):
  the ``~pymongo.collection.Collection.list_search_indexes`` method,
  the ``~pymongo.collection.Collection.create_search_index`` method,
  the ``~pymongo.collection.Collection.create_search_indexes`` method,
  the ``~pymongo.collection.Collection.drop_search_index`` method,
  the ``~pymongo.collection.Collection.update_search_index`` method
- Added the ``~pymongo.database.Database.cursor_command`` method
  and the ``~pymongo.command_cursor.CommandCursor.try_next`` method to support
  executing an arbitrary command that returns a cursor.
- ``cryptography`` 2.5 or later is now required for :ref:`OCSP` support.
- Improved bson encoding and decoding performance by up to 134%(`PYTHON-3729`_, `PYTHON-3797`_, `PYTHON-3816`_, `PYTHON-3817`_, `PYTHON-3820`_, `PYTHON-3824`_, and `PYTHON-3846`_).

.. warning:: PyMongo no longer supports PyPy3 versions older than 3.8. Users
  must upgrade to PyPy3.8+.

Issues Resolved
...............

See the `PyMongo 4.5 release notes in JIRA`_ for the list of resolved issues
in this release.

.. _PyMongo 4.5 release notes in JIRA: https://jira.mongodb.org/secure/ReleaseNote.jspa?projectId=10004&version=35492

.. _PYTHON-3729: https://jira.mongodb.org/browse/PYTHON-3729
.. _PYTHON-3797: https://jira.mongodb.org/browse/PYTHON-3797
.. _PYTHON-3816: https://jira.mongodb.org/browse/PYTHON-3816
.. _PYTHON-3817: https://jira.mongodb.org/browse/PYTHON-3817
.. _PYTHON-3820: https://jira.mongodb.org/browse/PYTHON-3820
.. _PYTHON-3824: https://jira.mongodb.org/browse/PYTHON-3824
.. _PYTHON-3846: https://jira.mongodb.org/browse/PYTHON-3846

Changes in Version 4.4.1
------------------------

Version 4.4.1 fixes the following bugs:

- Fixed a bug where pymongo would raise a ``ConfigurationError: Invalid SRV host``
  error when connecting to a "mongodb+srv://" URI that included capital letters
  in the SRV hosts returned from DNS. (`PYTHON-3800`_).
- Fixed a minor reference counting bug in the C extension (`PYTHON-3798`_).

Issues Resolved
...............

See the `PyMongo 4.4.1 release notes in JIRA`_ for the list of resolved issues
in this release.

.. _PYTHON-3798: https://jira.mongodb.org/browse/PYTHON-3798
.. _PYTHON-3800: https://jira.mongodb.org/browse/PYTHON-3800
.. _PyMongo 4.4.1 release notes in JIRA: https://jira.mongodb.org/secure/ReleaseNote.jspa?projectId=10004&version=36329

Changes in Version 4.4
-----------------------

PyMongo 4.4 brings a number of improvements including:

- Added support for MongoDB 7.0.
- Added support for Python 3.11.
- Added support for passing a list containing (key, direction) pairs
  or keys to the ``~pymongo.collection.Collection.create_index`` method.
- Improved bson encoding performance (`PYTHON-3717`_ and `PYTHON-3718`_).
- Improved support for Pyright to improve typing support for IDEs like Visual Studio Code
  or Visual Studio.
- Improved support for type-checking with MyPy "strict" mode (``--strict``).
- Added the ``~pymongo.encryption.ClientEncryption.create_encrypted_collection`` method,
  ``~pymongo.errors.EncryptedCollectionError``,
  the ``~pymongo.encryption.ClientEncryption.encrypt_expression`` method,
  ``~pymongo.encryption_options.RangeOpts``,
  and ``~pymongo.encryption.Algorithm.RANGEPREVIEW`` as part of the experimental
  Queryable Encryption beta.
- pymongocrypt 1.6.0 or later is now required for :ref:`In-Use Encryption` support. MongoDB
  Server 7.0 introduced a backwards breaking change to the QE protocol. Users taking
  advantage of the Queryable Encryption beta must now upgrade to MongoDB 7.0+ and
  PyMongo 4.4+.
- Previously, PyMongo's docs recommended using the ``datetime.datetime.utcnow`` method and
  the ``datetime.datetime.utcfromtimestamp`` method. utcnow and utcfromtimestamp are deprecated
  in Python 3.12, for reasons explained `in this Github issue`_. Instead, users should
  use the ``datetime.datetime.now(tz=timezone.utc)`` method and
  the ``datetime.datetime.fromtimestamp(tz=timezone.utc)`` method instead.

.. _in this Github issue: https://github.com/python/cpython/issues/103857

Issues Resolved
...............

See the `PyMongo 4.4 release notes in JIRA`_ for the list of resolved issues
in this release.

.. _PyMongo 4.4 release notes in JIRA: https://jira.mongodb.org/secure/ReleaseNote.jspa?projectId=10004&version=34354

.. _PYTHON-3717: https://jira.mongodb.org/browse/PYTHON-3717
.. _PYTHON-3718: https://jira.mongodb.org/browse/PYTHON-3718

Changes in Version 4.3.3
------------------------

Version 4.3.3 documents support for the following:

- :ref:`CSFLE on-demand credentials` for cloud KMS providers.
- Authentication support for :ref:`EKS Clusters`.
- Added the :ref:`timeout-example` example page to improve the documentation
  for ``pymongo.timeout``.

Bug Fixes
.........
- Fixed a performance regression in the ``~gridfs.GridFSBucket.download_to_stream`` method
  and the ``~gridfs.GridFSBucket.download_to_stream_by_name`` method by reading in chunks
  instead of line by line (`PYTHON-3502`_).
- Improved performance of the ``gridfs.grid_file.GridOut.read`` method and
  the ``gridfs.grid_file.GridOut.readline`` method (`PYTHON-3508`_).

Issues Resolved
...............

See the `PyMongo 4.3.3 release notes in JIRA`_ for the list of resolved issues
in this release.

.. _PYTHON-3502: https://jira.mongodb.org/browse/PYTHON-3502
.. _PYTHON-3508: https://jira.mongodb.org/browse/PYTHON-3508
.. _PyMongo 4.3.3 release notes in JIRA: https://jira.mongodb.org/secure/ReleaseNote.jspa?projectId=10004&version=34709

Changes in Version 4.3 (4.3.2)
------------------------------

Note: We withheld uploading tags 4.3.0 and 4.3.1 to PyPI due to a
version handling error and a necessary documentation update.

`dnspython <https://pypi.python.org/pypi/dnspython>`_ is now a required
dependency. This change makes PyMongo easier to install for use with "mongodb+srv://"
connection strings and `MongoDB Atlas <https://www.mongodb.com/cloud>`_.

PyMongo 4.3 brings a number of improvements including:

- Added support for decoding BSON datetimes outside of the range supported
  by Python's ``~datetime.datetime`` builtin. See
  :ref:`handling-out-of-range-datetimes` for examples, as well as
  ``bson.datetime_ms.DatetimeMS``,
  ``bson.codec_options.DatetimeConversion``, and
  ``bson.codec_options.CodecOptions``'s ``datetime_conversion``
  parameter for more details (`PYTHON-1824`_).
- PyMongo now resets its locks and other shared state in the child process
  after a ``os.fork`` to reduce the frequency of deadlocks. Note that
  deadlocks are still possible because libraries that PyMongo depends like
  OpenSSL cannot be made fork() safe in multithreaded applications.
  (`PYTHON-2484`_). For more info see :ref:`pymongo-fork-safe`.
- When used with MongoDB 6.0+, ``~pymongo.change_stream.ChangeStream`` s
  now allow for new types of events (such as DDL and C2C replication events)
  to be recorded with the new parameter ``show_expanded_events``
  that can be passed to methods such as the ``~pymongo.collection.Collection.watch`` method.
- PyMongo now internally caches AWS credentials that it fetches from AWS
  endpoints, to avoid rate limitations.  The cache is cleared when the
  credentials expire or an error is encountered.
- When using the ``MONGODB-AWS`` authentication mechanism with the
  ``aws`` extra, the behavior of credential fetching has changed with
  ``pymongo_auth_aws>=1.1.0``.  Please see examples/authentication for
  more information.

Bug fixes
.........

- Fixed a bug where  ``~pymongo.change_stream.ChangeStream``
  would allow an app to retry calling ``next()`` or ``try_next()`` even
  after non-resumable errors (`PYTHON-3389`_).
- Fixed a bug where the client could be unable to discover the new primary
  after a simultaneous replica set election and reconfig (`PYTHON-2970`_).

Issues Resolved
...............

See the `PyMongo 4.3 release notes in JIRA`_ for the list of resolved issues
in this release.

.. _PYTHON-1824: https://jira.mongodb.org/browse/PYTHON-1824
.. _PYTHON-2484: https://jira.mongodb.org/browse/PYTHON-2484
.. _PYTHON-2970: https://jira.mongodb.org/browse/PYTHON-2970
.. _PYTHON-3389: https://jira.mongodb.org/browse/PYTHON-3389
.. _PyMongo 4.3 release notes in JIRA: https://jira.mongodb.org/secure/ReleaseNote.jspa?projectId=10004&version=33425

Changes in Version 4.2
----------------------

.. warning:: PyMongo 4.2 drops support for Python 3.6: Python 3.7+ is now required.

PyMongo 4.2 brings a number of improvements including:

- Support for MongoDB 6.0.
- Support for the Queryable Encryption beta with MongoDB 6.0. Note that backwards-breaking
  changes may be made before the final release.  See :ref:`automatic-queryable-client-side-encryption` for example usage.
- Provisional (beta) support for ``pymongo.timeout`` to apply a single timeout
  to an entire block of pymongo operations. See :ref:`timeout-example` for examples.
- Added the ``timeoutMS`` URI and keyword argument to ``~pymongo.mongo_client.MongoClient``.
- Added the ``pymongo.errors.PyMongoError.timeout`` property which is ``True`` when
  the error was caused by a timeout.
- Added the ``check_exists`` argument to the ``~pymongo.database.Database.create_collection`` method
  that when True (the default)  runs an additional ``listCollections`` command to verify that the
  collection does not exist already.
- Added the following key management APIs to ``~pymongo.encryption.ClientEncryption``:

  - the ``~pymongo.encryption.ClientEncryption.get_key`` method
  - the ``~pymongo.encryption.ClientEncryption.get_keys`` method
  - the ``~pymongo.encryption.ClientEncryption.delete_key`` method
  - the ``~pymongo.encryption.ClientEncryption.add_key_alt_name`` method
  - the ``~pymongo.encryption.ClientEncryption.get_key_by_alt_name`` method
  - the ``~pymongo.encryption.ClientEncryption.remove_key_alt_name`` method
  - the ``~pymongo.encryption.ClientEncryption.rewrap_many_data_key`` method
  - ``~pymongo.encryption.RewrapManyDataKeyResult``

- Support for the ``crypt_shared`` library to replace ``mongocryptd`` using the new
  ``crypt_shared_lib_path`` and ``crypt_shared_lib_required`` arguments to
  ``~pymongo.encryption_options.AutoEncryptionOpts``.

Bug fixes
.........

- Fixed a bug where the ``~pymongo.collection.Collection.estimated_document_count`` method
  would fail with a "CommandNotSupportedOnView" error on views (`PYTHON-2885`_).
- Fixed a bug where invalid UTF-8 strings could be passed as patterns for ``~bson.regex.Regex``
  objects. ``bson.encode`` now correctly raises ``bson.errors.InvalidStringData`` (`PYTHON-3048`_).
- Fixed a bug that caused ``AutoReconnect("connection pool paused")`` errors in the child
  process after fork (`PYTHON-3257`_).
- Fixed a bug where  the ``~pymongo.collection.Collection.count_documents`` method and
  the ``~pymongo.collection.Collection.distinct`` method would fail in a transaction with
  ``directConnection=True`` (`PYTHON-3333`_).
- GridFS no longer uploads an incomplete files collection document after encountering an
  error in the middle of an upload fork. This results in fewer
  ``~gridfs.errors.CorruptGridFile`` errors (`PYTHON-1552`_).
- Renamed PyMongo's internal C extension methods to avoid crashing due to name conflicts
  with mpi4py and other shared libraries (`PYTHON-2110`_).
- Fixed tight CPU loop for network I/O when using PyOpenSSL (`PYTHON-3187`_).

Unavoidable breaking changes
............................

- pymongocrypt 1.3.0 or later is now required for client side field level
  encryption support.
- the ``~pymongo.collection.Collection.estimated_document_count`` method now always uses
  the `count`_ command. Due to an oversight in versions 5.0.0-5.0.8 of MongoDB,
  the count command was not included in V1 of the versioned API.
  Users of the Stable API with estimated_document_count are recommended to upgrade
  their server version to 5.0.9+ or set ``pymongo.server_api.ServerApi.strict``
  to ``False`` to avoid encountering errors (`PYTHON-3167`_).
- Removed generic typing from ``~pymongo.client_session.ClientSession`` to improve
  support for Pyright (`PYTHON-3283`_).
- Added ``__all__`` to the bson, pymongo, and gridfs packages. This could be a breaking
  change for apps that relied on ``from bson import *`` to import APIs not present in
  ``__all__`` (`PYTHON-3311`_).

.. _count: https://mongodb.com/docs/manual/reference/command/count/

Issues Resolved
...............

See the `PyMongo 4.2 release notes in JIRA`_ for the list of resolved issues
in this release.

.. _PYTHON-3048: https://jira.mongodb.org/browse/PYTHON-3048
.. _PYTHON-2885: https://jira.mongodb.org/browse/PYTHON-2885
.. _PYTHON-3167: https://jira.mongodb.org/browse/PYTHON-3167
.. _PYTHON-3257: https://jira.mongodb.org/browse/PYTHON-3257
.. _PYTHON-3333: https://jira.mongodb.org/browse/PYTHON-3333
.. _PYTHON-1552: https://jira.mongodb.org/browse/PYTHON-1552
.. _PYTHON-2110: https://jira.mongodb.org/browse/PYTHON-2110
.. _PYTHON-3283: https://jira.mongodb.org/browse/PYTHON-3283
.. _PYTHON-3311: https://jira.mongodb.org/browse/PYTHON-3311
.. _PYTHON-3187: https://jira.mongodb.org/browse/PYTHON-3187
.. _PyMongo 4.2 release notes in JIRA: https://jira.mongodb.org/secure/ReleaseNote.jspa?projectId=10004&version=33196

Changes in Version 4.1.1
-------------------------

Version 4.1.1 fixes a number of bugs:

- Fixed a memory leak bug when calling ``~bson.decode_all`` without a
  ``codec_options`` argument (`PYTHON-3222`_).
- Fixed a bug where ``~bson.decode_all`` did not accept ``codec_options``
  as a keyword argument (`PYTHON-3222`_).
- Fixed an oversight where type markers (py.typed files) were not included
  in our release distributions (`PYTHON-3214`_).
- Fixed a bug where pymongo would raise a "NameError: name sys is not defined"
  exception when attempting to parse a "mongodb+srv://" URI when the dnspython
  dependency was not installed (`PYTHON-3198`_).

Issues Resolved
...............

See the `PyMongo 4.1.1 release notes in JIRA`_ for the list of resolved issues
in this release.

.. _PYTHON-3198: https://jira.mongodb.org/browse/PYTHON-3198
.. _PYTHON-3214: https://jira.mongodb.org/browse/PYTHON-3214
.. _PYTHON-3222: https://jira.mongodb.org/browse/PYTHON-3222
.. _PyMongo 4.1.1 release notes in JIRA: https://jira.mongodb.org/secure/ReleaseNote.jspa?projectId=10004&version=33290

Changes in Version 4.1
----------------------

.. warning:: PyMongo 4.1 drops support for Python 3.6.0 and 3.6.1, Python 3.6.2+ is now required.

PyMongo 4.1 brings a number of improvements including:

- Type Hinting support (formerly provided by `pymongo-stubs`_).  See the type hints page for more information.
- Added support for the ``comment`` parameter to all helpers. For example see
  the ``~pymongo.collection.Collection.insert_one`` method.
- Added support for the ``let`` parameter to
  the ``~pymongo.collection.Collection.update_one`` method,
  the ``~pymongo.collection.Collection.update_many`` method,
  the ``~pymongo.collection.Collection.delete_one`` method,
  the ``~pymongo.collection.Collection.delete_many`` method,
  the ``~pymongo.collection.Collection.replace_one`` method,
  the ``~pymongo.collection.Collection.aggregate`` method,
  the ``~pymongo.collection.Collection.find_one_and_delete`` method,
  the ``~pymongo.collection.Collection.find_one_and_replace`` method,
  the ``~pymongo.collection.Collection.find_one_and_update`` method,
  the ``~pymongo.collection.Collection.find`` method,
  the ``~pymongo.collection.Collection.find_one`` method,
  and the ``~pymongo.collection.Collection.bulk_write`` method.
  ``let`` is a map of parameter names and values.
  Parameters can then be accessed as variables in an aggregate expression
  context.
- the ``~pymongo.collection.Collection.aggregate`` method now supports
  $merge and $out executing on secondaries on MongoDB >=5.0.
  aggregate() now always obeys the collection's ``read_preference`` on
  MongoDB >= 5.0.
- the ``gridfs.grid_file.GridOut.seek`` method now returns the new position in the file, to
  conform to the behavior of the ``io.IOBase.seek`` method.
- Improved reuse of implicit sessions (`PYTHON-2956`_).

Bug fixes
.........

- Fixed bug that would cause SDAM heartbeat timeouts and connection churn on
  AWS Lambda and other FaaS environments (`PYTHON-3186`_).
- Fixed bug where ``~pymongo.mongo_client.MongoClient``,
  ``~pymongo.database.Database``, and ``~pymongo.collection.Collection``
  mistakenly implemented ``typing.Iterable`` (`PYTHON-3084`_).

Issues Resolved
...............

See the `PyMongo 4.1 release notes in JIRA`_ for the list of resolved issues
in this release.

.. _PyMongo 4.1 release notes in JIRA: https://jira.mongodb.org/secure/ReleaseNote.jspa?projectId=10004&version=30619
.. _PYTHON-2956: https://jira.mongodb.org/browse/PYTHON-2956
.. _PYTHON-3084: https://jira.mongodb.org/browse/PYTHON-3084
.. _PYTHON-3186: https://jira.mongodb.org/browse/PYTHON-3186
.. _pymongo-stubs: https://github.com/mongodb-labs/pymongo-stubs

Changes in Version 4.0
----------------------

.. warning:: PyMongo 4.0 drops support for Python 2.7, 3.4, and 3.5.

.. warning:: PyMongo 4.0 drops support for MongoDB 2.6, 3.0, 3.2, and 3.4.

.. warning:: PyMongo 4.0 changes the default value of the ``directConnection`` URI option and
  keyword argument to ``~pymongo.mongo_client.MongoClient``
  to ``False`` instead of ``None``, allowing for the automatic
  discovery of replica sets. This means that if you
  want a direct connection to a single server you must pass
  ``directConnection=True`` as a URI option or keyword argument.
  For more details, see the relevant section of the PyMongo 4.x migration
  guide: :ref:`pymongo4-migration-direct-connection`.

PyMongo 4.0 brings a number of improvements as well as some backward breaking
changes. For example, all APIs deprecated in PyMongo 3.X have been removed.
Be sure to read the changes listed below and the Upgrade page
before upgrading from PyMongo 3.x.

Breaking Changes in 4.0
.......................

- Removed support for Python 2.7, 3.4, and 3.5. Python 3.6.2+ is now required.
- The default uuid_representation for ``~bson.codec_options.CodecOptions``,
  ``~bson.json_util.JSONOptions``, and
  ``~pymongo.mongo_client.MongoClient`` has been changed from
  ``bson.binary.UuidRepresentation.PYTHON_LEGACY`` to
  ``bson.binary.UuidRepresentation.UNSPECIFIED``. Attempting to encode a
  ``uuid.UUID`` instance to BSON or JSON now produces an error by default.
  See :ref:`handling-uuid-data-example` for details.
- Removed the ``waitQueueMultiple`` keyword argument to
  ``~pymongo.mongo_client.MongoClient`` and removed
  ``pymongo.errors.ExceededMaxWaiters``.
- Removed the ``socketKeepAlive`` keyword argument to
  ``~pymongo.mongo_client.MongoClient``.
- Removed the ``pymongo.mongo_client.MongoClient.fsync`` method,
  the ``pymongo.mongo_client.MongoClient.unlock`` method, and
  ``pymongo.mongo_client.MongoClient.is_locked``.
- Removed the ``pymongo.mongo_client.MongoClient.database_names`` method.
- Removed ``pymongo.mongo_client.MongoClient.max_bson_size``.
- Removed ``pymongo.mongo_client.MongoClient.max_message_size``.
- Removed ``pymongo.mongo_client.MongoClient.max_write_batch_size``.
- Removed ``pymongo.mongo_client.MongoClient.event_listeners``.
- Removed ``pymongo.mongo_client.MongoClient.max_pool_size``.
- Removed ``pymongo.mongo_client.MongoClient.max_idle_time_ms``.
- Removed ``pymongo.mongo_client.MongoClient.local_threshold_ms``.
- Removed ``pymongo.mongo_client.MongoClient.server_selection_timeout``.
- Removed ``pymongo.mongo_client.MongoClient.retry_writes``.
- Removed ``pymongo.mongo_client.MongoClient.retry_reads``.
- Removed the ``pymongo.database.Database.eval`` method,
  ``pymongo.database.Database.system_js`` and
  ``pymongo.database.SystemJS``.
- Removed the ``pymongo.database.Database.collection_names`` method.
- Removed the ``pymongo.database.Database.current_op`` method.
- Removed the ``pymongo.database.Database.authenticate`` method and
  the ``pymongo.database.Database.logout`` method.
- Removed the ``pymongo.database.Database.error`` method,
  the ``pymongo.database.Database.last_status`` method,
  the ``pymongo.database.Database.previous_error`` method,
  the ``pymongo.database.Database.reset_error_history`` method.
- Removed the ``pymongo.database.Database.add_user`` method and
  the ``pymongo.database.Database.remove_user`` method.
- Removed support for database profiler helpers
  the ``~pymongo.database.Database.profiling_level`` method,
  the ``~pymongo.database.Database.set_profiling_level`` method,
  and the ``~pymongo.database.Database.profiling_info`` method. Instead, users
  should run the profile command with the
  the ``~pymongo.database.Database.command`` method helper directly.
- Removed ``pymongo.OFF``, ``pymongo.SLOW_ONLY``, and
  ``pymongo.ALL``.
- Removed the ``pymongo.collection.Collection.parallel_scan`` method.
- Removed the ``pymongo.collection.Collection.ensure_index`` method.
- Removed the ``pymongo.collection.Collection.reindex`` method.
- Removed the ``pymongo.collection.Collection.save`` method.
- Removed the ``pymongo.collection.Collection.insert`` method.
- Removed the ``pymongo.collection.Collection.update`` method.
- Removed the ``pymongo.collection.Collection.remove`` method.
- Removed the ``pymongo.collection.Collection.find_and_modify`` method.
- Removed the ``pymongo.collection.Collection.count`` method.
- Removed the ``pymongo.collection.Collection.initialize_ordered_bulk_op`` method,
  the ``pymongo.collection.Collection.initialize_unordered_bulk_op`` method, and
  ``pymongo.bulk.BulkOperationBuilder``. Use
  the ``pymongo.collection.Collection.bulk_write`` method instead.
- Removed the ``pymongo.collection.Collection.group`` method.
- Removed the ``pymongo.collection.Collection.map_reduce`` method and
  the ``pymongo.collection.Collection.inline_map_reduce`` method.
- Removed the ``useCursor`` option for
  the ``~pymongo.collection.Collection.aggregate`` method.
- Removed the ``pymongo.mongo_client.MongoClient.close_cursor`` method. Use
  the ``pymongo.cursor.Cursor.close`` method instead.
- Removed the ``pymongo.mongo_client.MongoClient.kill_cursors`` method.
- Removed ``pymongo.cursor_manager.CursorManager`` and
  ``pymongo.cursor_manager``.
- Removed the ``pymongo.mongo_client.MongoClient.set_cursor_manager`` method.
- Removed the ``pymongo.cursor.Cursor.count`` method.
- Removed ``pymongo.thread_util``.
- Removed ``~pymongo.mongo_replica_set_client.MongoReplicaSetClient``.
- Removed ``~pymongo.ismaster.IsMaster``.
  Use ``~pymongo.hello.Hello`` instead.
- Removed ``pymongo.son_manipulator``,
  ``pymongo.son_manipulator.SONManipulator``,
  ``pymongo.son_manipulator.ObjectIdInjector``,
  ``pymongo.son_manipulator.ObjectIdShuffler``,
  ``pymongo.son_manipulator.AutoReference``,
  ``pymongo.son_manipulator.NamespaceInjector``,
  the ``pymongo.database.Database.add_son_manipulator`` method,
  ``pymongo.database.Database.outgoing_copying_manipulators``,
  ``pymongo.database.Database.outgoing_manipulators``,
  ``pymongo.database.Database.incoming_copying_manipulators``, and
  ``pymongo.database.Database.incoming_manipulators``.
- Removed the ``manipulate`` and ``modifiers`` parameters from
  the ``~pymongo.collection.Collection.find`` method,
  the ``~pymongo.collection.Collection.find_one`` method,
  the ``~pymongo.collection.Collection.find_raw_batches`` method, and
  the ``~pymongo.cursor.Cursor`` method.
- Removed the ``pymongo.message.delete`` method, the ``pymongo.message.get_more`` method,
  the ``pymongo.message.insert`` method, the ``pymongo.message.kill_cursors`` method,
  the ``pymongo.message.query`` method, and the ``pymongo.message.update`` method.
- Removed ``pymongo.errors.NotMasterError``.
  Use ``pymongo.errors.NotPrimaryError`` instead.
- Removed ``pymongo.errors.CertificateError``.
- Removed ``pymongo.GEOHAYSTACK``.
- Removed ``bson.binary.UUIDLegacy``.
- Removed ``bson.json_util.STRICT_JSON_OPTIONS``. Use
  ``~bson.json_util.RELAXED_JSON_OPTIONS`` or
  ``~bson.json_util.CANONICAL_JSON_OPTIONS`` instead.
- Changed the default JSON encoding representation from legacy to relaxed.
  The json_mode parameter for ``bson.json_util.dumps`` now defaults to
  ``~bson.json_util.RELAXED_JSON_OPTIONS``.
- Changed the BSON and JSON decoding behavior of ``~bson.dbref.DBRef``
  to match the behavior outlined in the `DBRef specification`_ version 1.0.
  Specifically, PyMongo now only decodes a subdocument into a
  ``~bson.dbref.DBRef`` if and only if, it contains both ``$ref`` and
  ``$id`` fields and the ``$ref``, ``$id``, and ``$db`` fields are of the
  correct type. Otherwise the document is returned as normal. Previously, any
  subdocument containing a ``$ref`` field would be decoded as a
  ``~bson.dbref.DBRef``.
- The "tls" install extra is no longer necessary or supported and will be
  ignored by pip.
- The ``tz_aware`` argument to ``~bson.json_util.JSONOptions``
  now defaults to ``False`` instead of ``True``. the ``bson.json_util.loads`` method now
  decodes datetime as naive by default. See :ref:`tz_aware_default_change` for more info.
- ``directConnection`` URI option and keyword argument to ``~pymongo.mongo_client.MongoClient``
  defaults to ``False`` instead of ``None``, allowing for the automatic
  discovery of replica sets. This means that if you
  want a direct connection to a single server you must pass
  ``directConnection=True`` as a URI option or keyword argument.
- The ``hint`` option is now required when using ``min`` or ``max`` queries
  with the ``~pymongo.collection.Collection.find`` method.
- ``name`` is now a required argument for the ``pymongo.driver_info.DriverInfo`` class.
- When providing a "mongodb+srv://" URI to
  ``~pymongo.mongo_client.MongoClient`` constructor you can now use the
  ``srvServiceName`` URI option to specify your own SRV service name.
- the ``~bson.son.SON.items`` method now returns a ``dict_items`` object rather
  than a list.
- Removed the ``bson.son.SON.iteritems`` method.
- ``~pymongo.collection.Collection`` and ``~pymongo.database.Database``
  now raises an error upon evaluating as a Boolean, please use the
  syntax ``if collection is not None:`` or ``if database is not None:`` as
  opposed to
  the previous syntax which was simply ``if collection:`` or ``if database:``.
  You must now explicitly compare with None.
- ``~pymongo.mongo_client.MongoClient`` cannot execute any operations
  after being closed. The previous behavior would simply reconnect. However,
  now you must create a new instance.
- Classes ``~bson.int64.Int64``, ``~bson.min_key.MinKey``,
  ``~bson.max_key.MaxKey``, ``~bson.timestamp.Timestamp``,
  ``~bson.regex.Regex``, and ``~bson.dbref.DBRef`` all implement
  ``__slots__`` now. This means that their attributes are fixed, and new
  attributes cannot be added to them at runtime.
- Empty projections (eg {} or []) for
  the ``~pymongo.collection.Collection.find`` method, and
  the ``~pymongo.collection.Collection.find_one`` method
  are passed to the server as-is rather than the previous behavior which
  substituted in a projection of ``{"_id": 1}``. This means that an empty
  projection will now return the entire document, not just the ``"_id"`` field.
- ``~pymongo.mongo_client.MongoClient`` now raises a
  ``~pymongo.errors.ConfigurationError`` when more than one URI is passed
  into the ``hosts`` argument.
- ``~pymongo.mongo_client.MongoClient`` now raises an
  ``~pymongo.errors.InvalidURI`` exception
  when it encounters unescaped percent signs in username and password when
  parsing MongoDB URIs.
- Comparing two ``~pymongo.mongo_client.MongoClient`` instances now
  uses a set of immutable properties rather than
  ``~pymongo.mongo_client.MongoClient.address`` which can change.
- Removed the ``disable_md5`` parameter for ``~gridfs.GridFSBucket`` and
  ``~gridfs.GridFS``. See :ref:`removed-gridfs-checksum` for details.
- pymongocrypt 1.2.0 or later is now required for client side field level
  encryption support.

Notable improvements
....................

- Enhanced connection pooling to create connections more efficiently and
  avoid connection storms.
- Added the ``maxConnecting`` URI and
  ``~pymongo.mongo_client.MongoClient`` keyword argument.
- ``~pymongo.mongo_client.MongoClient`` now accepts a URI and keyword
  argument ``srvMaxHosts`` that limits the number of mongos-like hosts a client
  will connect to. More specifically, when a mongodb+srv:// connection string
  resolves to more than ``srvMaxHosts`` number of hosts, the client will randomly
  choose a ``srvMaxHosts`` sized subset of hosts.
- Added ``pymongo.mongo_client.MongoClient.options`` for read-only access
  to a client's configuration options.
- Support for the "kmip" KMS provider for client side field level encryption.
  See the docstring for ``~pymongo.encryption_options.AutoEncryptionOpts``
  and ``~pymongo.encryption``.

Issues Resolved
...............

See the `PyMongo 4.0 release notes in JIRA`_ for the list of resolved issues
in this release.

.. _PyMongo 4.0 release notes in JIRA: https://jira.mongodb.org/secure/ReleaseNote.jspa?projectId=10004&version=18463
.. _DBRef specification: https://github.com/mongodb/specifications/blob/5a8c8d7/source/dbref.rst
