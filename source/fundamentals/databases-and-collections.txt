.. _pymongo-databases-collections:

Databases and Collections
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: primary, secondary, replica set, ping, latency

Overview
--------

This guide describes how to use {+driver-short+} to work with databases and collections.

Retrieve a Database
-------------------

A single deployment of MongoDB can support multiple independent
:manual:`databases </core/databases-and-collections>`. When
working with PyMongo, you can access a database by using attribute-style access
on ``~pymongo.mongo_client.MongoClient`` instances:

.. code-block:: python

   >>> db = client.test_database

If the name of the database won't work with attribute-style access--for example,
``test-database``-- you can use dictionary-style access instead:

.. code-block:: python

   >>> db = client["test-database"]

Retrieve a Collection
---------------------

A :manual:`collection </core/databases-and-collections>` is a
group of documents stored in MongoDB, roughly
equivalent to a table in a relational database. When using {+driver-short+},
you can access a collection by using either attribute-style or dictionary-style
access:

.. code-block:: python

   >>> collection = db.test_collection
   >>> collection = db["test-collection"]

.. note::

   Using the preceding syntax to access a database or collection doesn't create the
   database or collection. MongoDB creates collections and databases *lazily*: they
   are created only when you insert the first document into them.

Documents
---------

MongoDB uses JSON-style documents to represent data. {+driver-short+} uses dictionaries
to represent these documents. The following example uses a dictionary to represent a
blog post:

.. code-block:: python

   >>> import datetime
   >>> post = {
   ...     "author": "Mike",
   ...     "text": "My first blog post!",
   ...     "tags": ["mongodb", "python", "pymongo"],
   ...     "date": datetime.datetime.now(tz=datetime.timezone.utc),
   ... }

.. note::
  
   {+driver-short+} automatically converts native Python types in documents 
   to and from the appropriate `BSON <https://bsonspec.org/>`__ types.

.. todo link to table of Python <-> BSON types

Configure Read Operations
-------------------------

This section describes how to configure read operations against MongoDB replica sets.

Read Preferences
~~~~~~~~~~~~~~~~

By default, the read preference of a ``~pymongo.database.Database`` is
inherited from the ``MongoClient``, and the read preference of a
``~pymongo.collection.Collection`` is inherited from its database.
To change the read preference of a collection or database, call
the ``~pymongo.mongo_client.MongoClient.get_database()`` method or the
``~pymongo.database.Database.get_collection()`` method, and pass one of the following
read preferences as an argument:

- ``~pymongo.read_preferences.ReadPreference.PRIMARY``: {+driver-short+} reads from the
  primary replica-set member. This is the default read preference and provides the
  strongest consistency. If no primary member is available, {+driver-short+} raises an
  ``AutoReconnect`` error.

- ``~pymongo.read_preferences.ReadPreference.PRIMARY_PREFERRED``: {+driver-short+} reads
  from the primary replica-set member if it's available. Otherwise, it reads from a
  secondary member.

- ``~pymongo.read_preferences.ReadPreference.SECONDARY``: {+driver-short+} reads from a
  secondary replica-set member. If no matching secondary member is available, {+driver-short+}
  raises an ``AutoReconnect`` error.

- ``~pymongo.read_preferences.ReadPreference.SECONDARY_PREFERRED``: {+driver-short+} reads
  from a secondary replica-set member if one is available. Otherwise, it reads from the
  primary.

- ``~pymongo.read_preferences.ReadPreference.NEAREST``: {+driver-short+} reads from any
  available replica-set member.

.. tip::
   
   The driver also includes a class to represent each read preference:

   - ``~pymongo.read_preferences.Primary``
   - ``~pymongo.read_preferences.PrimaryPreferred``
   - ``~pymongo.read_preferences.Secondary``
   - ``~pymongo.read_preferences.SecondaryPreferred``
   - ``~pymongo.read_preferences.Nearest``

The following example shows how to set the read preferences for a database and a
collection:

.. code-block:: python

   >>> from pymongo import ReadPreference
   >>> client.read_preference
   SecondaryPreferred(tag_sets=None)
   >>> db = client.get_database('test', read_preference=ReadPreference.SECONDARY)
   >>> db.read_preference
   Secondary(tag_sets=None)
   >>> coll = db.get_collection('test', read_preference=ReadPreference.PRIMARY)
   >>> coll.read_preference
   Primary()

You can also change the read preference of an existing ``~pymongo.collection.Collection``
by using the ``~pymongo.collection.Collection.with_options()`` method:

.. code-block:: python

   >>> coll2 = coll.with_options(read_preference=ReadPreference.NEAREST)
   >>> coll.read_preference
   Primary()
   >>> coll2.read_preference
   Nearest(tag_sets=None)

Because most database commands can be sent only to the primary member of a
replica set, the ``~pymongo.database.Database.command()`` method doesn't
obey the database's ``~pymongo.database.Database.read_preference``. Instead, you can
pass a read preference to the method:

.. code-block:: python

   >>> db.command('dbstats', read_preference=ReadPreference.NEAREST)
   {...}

Tag Sets
~~~~~~~~

You can :manual:`tag </core/read-preference-tags/>` replica-set
members according to any criteria you choose. By default, {+driver-short+} ignores tags
when choosing a member to read from, but your read preference can be configured with
a ``tag_sets`` parameter.

The ``tag_sets`` parameter is a list of dictionaries. Each dictionary
includes tag values that the replica-set member must match in order to be used.
{+driver-short+} tries each set of tags in turn until it finds a set of
tags with at least one matching replica-set member.

In the following code example, the tag set passed to the ``read_preference`` argument
instructs {+driver-short+} to prefer reads from the
New York data center (``dc``), but to fall back to the San Francisco data center:

.. code-block:: python

   >>> from pymongo.read_preferences import Secondary
   >>> db = client.get_database(
   ...     'test', read_preference=Secondary([{'dc': 'ny'}, {'dc': 'sf'}]))
   >>> db.read_preference
   Secondary(tag_sets=[{'dc': 'ny'}, {'dc': 'sf'}])

When performing a read, the ``MongoClient`` in the preceding example tries to find
secondary members in New York, then in San Francisco. If it can't find a secondary member
in either location, it raises an ``AutoReconnect`` error.

.. tip::

   To avoid an ``AutoReconnect`` error, include an empty dictionary (``{}``) at the end of
   the list. This instructs {+driver-short+} to read from any member that matches the mode,
   ignoring tags.

.. _distributes reads to secondaries:

Local Threshold
~~~~~~~~~~~~~~~

If multiple replica-set members match the read preference and tag sets you specify,
{+driver-short+} reads from among the nearest members, chosen according to ping time.
By default, the driver uses only those members whose ping times are within 15 milliseconds
of the nearest member for queries.
To distribute reads among members with
higher latencies, pass the ``localThresholdMS`` to the ``MongoClient()`` constructor.

The following example specifies a local threshold of 35 milliseconds:

.. code-block:: python

   >>> client = pymongo.MongoClient(
   ...     replicaSet='repl0',
   ...     readPreference='secondaryPreferred',
   ...     localThresholdMS=35)

In the preceding example, {+driver-short+} distributes reads among matching members
within 35 milliseconds of the closest member's ping time.

.. note::
  
  {+driver-short+} ignores the value of ``localThresholdMS`` when communicating with a
  replica set through a ``mongos`` instance. In this case, use the
  :manual:`localThreshold </reference/program/mongos/#std-option-mongos.--localThreshold>`
  command-line option.