.. _pymongo-auth:

Authentication Mechanisms
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: authorize, boto

MongoDB supports several different authentication mechanisms. This guide
discusses all authentication methods currently supported by {+driver-short+}.

.. tip:: Percent-Escaping

   You must percent-escape a username and password before including them
   in a MongoDB URI. The ``quote_plus()`` method, available in the 
   `urllib.parse <https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote_plus>`__
   module, is one way to perform this task.

.. _scram_sha_256:

SCRAM-SHA-256 (RFC 7677)
------------------------

SCRAM-SHA-256 is the default authentication mechanism on MongoDB deployments
running MongoDB 4.0 or later. To authenticate, pass the percent-escaped
username and password to the ``MongoClient()`` constructor.
By default, MongoDB authenticates against the ``admin`` database. To authenticate against
a different database, pass the ``authSource`` argument when you call the constructor.

The following code example shows how to pass a username, password, authentication source,
and authentication mechanism to the ``MongoClient()`` constructor for SCRAM-SHA-256
authentication:

.. code-block:: python

   >>> from pymongo import MongoClient
   >>> client = MongoClient('example.com',
   ...                      username='user',
   ...                      password='password',
   ...                      authSource='the_database',
   ...                      authMechanism='SCRAM-SHA-256')

Instead of passing these options directly to the ``MongoClient()`` constructor, you can
include them in your MongoDB URI:

.. code-block:: python

   >>> uri = "mongodb://user:password@example.com/?authSource=the_database&authMechanism=SCRAM-SHA-256"
   >>> client = MongoClient(uri)

SCRAM-SHA-1 (RFC 5802)
----------------------

SCRAM-SHA-1 is the default authentication mechanism on MongoDB deployments
running MongoDB >= 3.0 and < 4.0. To authenticate, pass the percent-escaped
username and password to the ``MongoClient()`` constructor.
By default, MongoDB authenticates against the ``admin`` database. To authenticate against
a different database, pass the ``authSource`` argument when you call the constructor.

.. code-block:: python

   >>> from pymongo import MongoClient
   >>> client = MongoClient('example.com',
   ...                      username='user',
   ...                      password='password',
   ...                      authSource='the_database',
   ...                      authMechanism='SCRAM-SHA-1')

Instead of passing these options directly to the ``MongoClient()`` constructor, you can
include them in your MongoDB URI:

.. code-block:: python

  >>> uri = "mongodb://user:password@example.com/?authSource=the_database&authMechanism=SCRAM-SHA-1"
  >>> client = MongoClient(uri)

.. tip::
  
   For best performance on Python versions older than 2.7.8, install the
   `backports.pbkdf2 <https://pypi.python.org/pypi/backports.pbkdf2/>`__ package.

MONGODB-CR
----------

.. warning::
  
  MONGODB-CR was deprecated with the release of MongoDB 3.6 and
  is no longer supported by MongoDB 4.0.

Before MongoDB 3.0, the default authentication mechanism was the "MongoDB
Challenge-Response" protocol (MONGODB-CR). As with the preceding authentication
mechanisms, you can pass the username, password, database, and authentication mechanism
to the ``MongoClient()`` constructor, or include them in your MongoDB URI:

.. code-block:: python

   >>> from pymongo import MongoClient
   >>> client = MongoClient('example.com',
   ...                      username='user',
   ...                      password='password',
   ...                      authMechanism='MONGODB-CR')
   >>>
   >>> uri = "mongodb://user:password@example.com/?authSource=the_database&authMechanism=MONGODB-CR"
   >>> client = MongoClient(uri)

Default Authentication Mechanism
--------------------------------

If you don't specify an authentication mechanism, {+driver-short+} defaults to SCRAM-SHA-1 when
connected to MongoDB 3.6. When connected to MongoDB 4.0+, {+driver-short+} negotiates the mechanism
to use (SCRAM-SHA-1 or SCRAM-SHA-256).

Default Database and "authSource"
---------------------------------

You can specify both a default database and the authentication database in the
URI:

.. code-block:: python

   >>> uri = "mongodb://user:password@example.com/default_db?authSource=admin"
   >>> client = MongoClient(uri)

{+driver-short+} will authenticate against the ``admin`` database, but the default database
will be ``default_db``:

.. code-block:: python

   >>> # get_database with no "name" argument chooses the DB from the URI
   >>> db = MongoClient(uri).get_database()
   >>> print(db.name)
   'default_db'

.. _mongodb_x509:

MONGODB-X509
------------

The MONGODB-X509 mechanism authenticates via the X.509 certificate presented
by the driver during TLS/SSL negotiation. This authentication method requires
the use of TLS/SSL connections with certificate validation:

.. code-block:: python

   >>> from pymongo import MongoClient
   >>> client = MongoClient('example.com',
   ...                      authMechanism="MONGODB-X509",
   ...                      tls=True,
   ...                      tlsCertificateKeyFile='/path/to/client.pem',
   ...                      tlsCAFile='/path/to/ca.pem')

MONGODB-X509 authenticates against the ``$external`` virtual database, so you
do not have to specify a database in the URI:

.. code-block:: python

   >>> uri = "mongodb://example.com/?authMechanism=MONGODB-X509"
   >>> client = MongoClient(uri,
   ...                      tls=True,
   ...                      tlsCertificateKeyFile='/path/to/client.pem',
   ...                      tlsCAFile='/path/to/ca.pem')
   >>>

.. _MONGODB-AWS:

MONGODB-AWS
-----------

The MONGODB-AWS authentication mechanism is available in MongoDB 4.4+ and
requires extra {+driver-short+} dependencies. To use MONGODB-AWS authentication,
install the ``aws`` option when you install the ``pymongo`` package:

.. code-block:: python

   $ python -m pip install 'pymongo[aws]'

The MONGODB-AWS mechanism authenticates by using AWS IAM credentials (an access
key ID and a secret access key),
`temporary AWS IAM credentials <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html>`__ obtained
from an `AWS Security Token Service (STS) <https://docs.aws.amazon.com/STS/latest/APIReference/Welcome.html>`__
`Assume Role <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html>`__
request,
AWS Lambda `environment variables <https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime>`__,
or temporary AWS IAM credentials assigned to an
`EC2 instance <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html>`__
or ECS task. The use of temporary credentials, in
addition to an access key ID and a secret access key, also requires a
security (or session) token.

You can configure credentials by using the MongoDB URI, environment variables,
or the local EC2 or ECS endpoint. The order in which the client searches for
`credentials <https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html>`__
is the same as the one used by the AWS ``boto3`` library when using
``pymongo_auth_aws`` >= 1.1.0.

If you are using ``boto3`` to handle credentials, any shared AWS credentials or config
file you have will be used by default if AWS auth environment
variables are not set.  To override this behavior, set
``AWS_SHARED_CREDENTIALS_FILE=""`` in your shell, or add
``os.environ["AWS_SHARED_CREDENTIALS_FILE"] = ""`` to your script or
application.  Alternatively, you can create an AWS profile specifically for
your MongoDB credentials and set ``AWS_PROFILE`` to that profile name.

.. note::

   MONGODB-AWS authenticates against the ``$external``" virtual database, so none of
   the URIs in this section must include the ``authSource`` URI option.

AWS IAM credentials
~~~~~~~~~~~~~~~~~~~

Applications can use AWS IAM credentials to authenticate by providing a valid
access key ID and secret access key pair as the username and password,
respectively, in the MongoDB URI:

.. code-block:: python
   :emphasize-lines: 2

   >>> from pymongo import MongoClient
   >>> uri = "mongodb+srv://<access_key_id>:<secret_access_key>@example.mongodb.net/?authMechanism=MONGODB-AWS"
   >>> client = MongoClient(uri)

.. important::
  
   You must percent-escape the ``access_key_id`` and ``secret_access_key`` before including
   them in the URI.

AssumeRole
~~~~~~~~~~

Applications can authenticate themselves by using temporary credentials returned from an
``AssumeRole`` request. These temporary credentials include an access key
ID, a secret access key, and a security token passed into the URI. The following example
shows how to include these values in your MongoDB URI:

.. code-block:: python
   :emphasize-lines: 2

  >>> from pymongo import MongoClient
  >>> uri = "mongodb+srv://<access_key_id>:<secret_access_key>@example.mongodb.net/?authMechanism=MONGODB-AWS&authMechanismProperties=AWS_SESSION_TOKEN:<session_token>"
  >>> client = MongoClient(uri)

.. important::
  
   You must percent-escape the ``access_key_id``, ``secret_access_key``, and ``session_token``
   before including them in the URI.

AWS Lambda (Environment Variables)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you use the MONGODB-AWS authentication mechanism but don't provide a username and password,
the client will fall back to using the environment variables
``AWS_ACCESS_KEY_ID``, ``AWS_SECRET_ACCESS_KEY``, and ``AWS_SESSION_TOKEN``
for the access key ID, secret access key, and session token, respectively:

.. code-block:: python

   $ export AWS_ACCESS_KEY_ID=<access_key_id>
   $ export AWS_SECRET_ACCESS_KEY=<secret_access_key>
   $ export AWS_SESSION_TOKEN=<session_token>
   $ python
   >>> from pymongo import MongoClient
   >>> uri = "mongodb+srv://example.mongodb.net/?authMechanism=MONGODB-AWS"
   >>> client = MongoClient(uri)

.. note::
  
   When using environment variables for authentication,
   don't include the username, password, or session token in your URI. 
   Do not percent-escape the values in these environment variables.

.. _EKS Clusters:

EKS Clusters
~~~~~~~~~~~~

If your application
`authenticates users for your cluster from an OpenID Connect identity provider, <https://docs.aws.amazon.com/eks/latest/userguide/authenticate-oidc-identity-provider.html>`__
you can use the provided credentials by giving the associated IAM User
`sts:AssumeRoleWithWebIdentity <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html>`__
permission.

The driver uses an ``AssumeRoleWithWebIdentity`` call to retrieve temporary credentials
if the following criteria are met:

- You specify the MONGODB-AWS authentication mechanism.
- You don't provide a username and password.
- The ``AWS_WEB_IDENTITY_TOKEN_FILE``, ``AWS_ROLE_ARN``, and
  optional ``AWS_ROLE_SESSION_NAME`` environment variables are set.
- The application is using ``pymongo_auth_aws`` >= 1.1.0 for EKS support.

ECS Container
~~~~~~~~~~~~~

Applications can authenticate from an ECS container by using temporary
credentials assigned to the machine. The following example shows a sample URI on an ECS
container:

.. code-block:: python

   >>> from pymongo import MongoClient
   >>> uri = "mongodb+srv://example.mongodb.com/?authMechanism=MONGODB-AWS"
   >>> client = MongoClient(uri)

.. note::
  
   When using an ECS container for authentication, don't include the username, password,
   or session token in the URI.
   {+driver-short+} queries the ECS container endpoint to obtain these credentials.

EC2 Instance
~~~~~~~~~~~~

Applications can authenticate from an EC2 instance by using temporary
credentials assigned to the machine. The following example shows a sample URI on an EC2
machine:

.. code-block:: python

   >>> from pymongo import MongoClient
   >>> uri = "mongodb+srv://example.mongodb.com/?authMechanism=MONGODB-AWS"
   >>> client = MongoClient(uri)

.. note::
  
   When using an EC2 instance for authentication, don't include the username, password,
   or session token in the URI.
   {+driver-short+} queries the ECS container endpoint to obtain these credentials.
