.. _pymongo-enterprise-auth:

Enterprise Authentication Mechanisms
====================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: ldap, encryption, principal, tls

In this guide, you can learn how to authenticate with MongoDB by using the authentication
mechanisms available only in the MongoDB Enterprise Edition.

.. _gssapi:

GSSAPI (Kerberos)
-----------------

The Generic Security Services API (GSSAPI) provides an interface  for Kerberos
authentication.

Unix
~~~~

To use GSSAPI to authenticate, you must first use pip or easy_install to install the Python
`kerberos <http://pypi.python.org/pypi/kerberos>`__ or
`pykerberos <https://pypi.python.org/pypi/pykerberos>`__ module.

After installing the module, run the ``kinit`` command, as shown in the following example.
``kinit`` obtains and caches an initial ticket-granting ticket.

.. _kerberos:

.. code-block:: none

   $ kinit mongodbuser@EXAMPLE.COM
   mongodbuser@EXAMPLE.COM's Password:
   $ klist
   Credentials cache: FILE:/tmp/krb5cc_1000
           Principal: mongodbuser@EXAMPLE.COM

     Issued                Expires               Principal
   Feb  9 13:48:51 2013  Feb  9 23:48:51 2013  krbtgt/EXAMPLE.COM@EXAMPLE.COM

After obtaining a ticket-granting ticket, call the ``MongoClient`` constructor, passing
the MongoDB URI as an argument. The URI must contain the URL-encoded Kerberos principal
and the ``authMechanism=GSSAPI`` as a parameter.

.. code-block:: python

  >>> # Note: the kerberos principal must be url encoded.
  >>> from pymongo import MongoClient
  >>> uri = "mongodb://mongodbuser%40EXAMPLE.COM@mongo-server.example.com/?authMechanism=GSSAPI"
  >>> client = MongoClient(uri)
  >>>

.. note::
  
   You don't need to include a database in the MongoDB URI. GSSAPI authenticates against
   the ``$external`` virtual database.

By default, MongoDB uses ``mongodb`` as the authentication service name. To specify a
different service name, add the ``authMechanismProperties`` parameter to your MongoDB
URI, as shown in the following example:

.. code-block:: python
   :emphasize-lines: 2

   >>> from pymongo import MongoClient
   >>> uri = "mongodb://mongodbuser%40EXAMPLE.COM@mongo-server.example.com/?authMechanism=GSSAPI&authMechanismProperties=SERVICE_NAME:myservicename"
   >>> client = MongoClient(uri)

Windows (SSPI)
~~~~~~~~~~~~~~

First, install the `winkerberos <https://pypi.python.org/pypi/winkerberos/>`__ module.
You can then call the ``MongoClient()`` constructor, passing in your MongoDB URI. The
URI must include the principal name and ``authMechanism=GSSAPI`` parameter.
If the user to authenticate is different from the user that owns the
application process, you must also provide the authenticating user's password.

.. code-block:: python

   >>> uri = "mongodb://mongodbuser%40EXAMPLE.COM:mongodbuserpassword@example.com/?authMechanism=GSSAPI"

Two more ``authMechanismProperties`` are supported on Windows platforms:

- **CANONICALIZE_HOST_NAME**: whether to use the fully qualified domain name (FQDN) of the
  MongoDB host for the server principal. (GSSAPI libraries on Unix do this by
  default).

.. code-block:: python

   >>> uri = "mongodb://mongodbuser%40EXAMPLE.COM@example.com/?authMechanism=GSSAPI&authMechanismProperties=CANONICALIZE_HOST_NAME:true"

- **SERVICE_REALM**: specifies the realm of the service. Use this option when the user's
  realm is different from the service's realm.

.. code-block:: python

   >>> uri = "mongodb://mongodbuser%40EXAMPLE.COM@example.com/?authMechanism=GSSAPI&authMechanismProperties=SERVICE_REALM:otherrealm"

.. _sasl_plain:

SASL PLAIN (RFC 4616)
---------------------

To authenticate with the PLAIN Simple Authentication and Security Layer (SASL), include
``authMechanism=PLAIN`` as a parameter in your MongoDB URI:

.. code-block:: python

  >>> from pymongo import MongoClient
  >>> uri = "mongodb://user:password@example.com/?authMechanism=PLAIN"
  >>> client = MongoClient(uri)

SASL PLAIN is a clear-text authentication mechanism. We strongly recommend
that you use TLS/SSL with certificate validation when using the SASL PLAIN mechanism
to connect to MongoDB. The following example shows how to enable TLS and certificate
validation when you construct a ``MongoClient`` object:

.. code-block:: python

   >>> from pymongo import MongoClient
   >>> uri = "mongodb://user:password@example.com/?authMechanism=PLAIN"
   >>> client = MongoClient(uri,
   ...                      tls=True,
   ...                      tlsCertificateKeyFile='/path/to/client.pem',
   ...                      tlsCAFile='/path/to/ca.pem')

.. note::

   The code examples in this section use the ``$external`` virtual database for LDAP support.
