.. _pymongo-indexes:

Indexes
=======

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: query, location 

Overview
--------

Adding indexes can help accelerate certain queries and can also add additional
functionality to querying and storing documents.

Unique Indexes
--------------

This section demonstrates how to create a
:manual:`unique index </core/index-unique/>` on a key that
rejects documents whose value for that key already exists in the index.

.. tip::
  
  For more information about indexes, see the
  :manual:`MongoDB Server manual. </indexes/>`

The following code creates a unique index on the ``user_id`` field:

.. code-block:: python

   >>> result = db.profiles.create_index([("user_id", pymongo.ASCENDING)], unique=True)
   >>> sorted(list(db.profiles.index_information()))
   ['_id_', 'user_id_1']

.. note::
  
  MongoDB automatically creates an index on the ``_id`` field.

The following code creates two user profiles:

.. code-block:: python

   >>> user_profiles = [{"user_id": 211, "name": "Luke"}, {"user_id": 212, "name": "Ziltoid"}]
   >>> result = db.profiles.insert_many(user_profiles)

A unique index prevents you from inserting a document whose value for the ``user_id``
field is already in the collection:

.. code-block:: python

   >>> new_profile = {"user_id": 213, "name": "Drew"}
   >>> duplicate_profile = {"user_id": 212, "name": "Tommy"}
   >>> result = db.profiles.insert_one(new_profile)  # This is fine.
   >>> result = db.profiles.insert_one(duplicate_profile)
   Traceback (most recent call last):
   DuplicateKeyError: E11000 duplicate key error index: test_database.profiles.$user_id_1 dup key: { : 212 }

Geospatial Indexes
------------------

This section shows how to create and use a ``~pymongo.GEO2D``
index in PyMongo.

The following code example shows how to create a geospatial index:

.. code-block:: python

   >>> from pymongo import MongoClient, GEO2D
   >>> db = MongoClient().geo_example
   >>> db.places.create_index([("loc", GEO2D)])
   'loc_2d'

Locations in MongoDB are represented using either embedded documents
or lists where the first two elements are coordinates. The following code inserts
four example locations into the geospatial index:

.. code-block:: python

   >>> result = db.places.insert_many(
   ...     [{"loc": [2, 5]}, {"loc": [30, 5]}, {"loc": [1, 2]}, {"loc": [4, 4]}]
   ... )
   >>> result.inserted_ids
   [ObjectId('...'), ObjectId('...'), ObjectId('...'), ObjectId('...')]

.. tip::

   To create a spherical (earth-like) geospatial index, use ``~pymongo.GEOSPHERE`` instead.
   When specifying latitude and longitude coordinates in ``~pymongo.GEOSPHERE``,
   list the longitude first and the latitude second.

After you create and populate the geospatial index, you can find documents near another
point. The following example shows how to find documents near a location that has
the coordinates ``3, 6``:

.. code-block:: python

   >>> import pprint
   >>> for doc in db.places.find({"loc": {"$near": [3, 6]}}).limit(3):
   ...     pprint.pprint(doc)
   ...
   {'_id': ObjectId('...'), 'loc': [2, 5]}
   {'_id': ObjectId('...'), 'loc': [4, 4]}
   {'_id': ObjectId('...'), 'loc': [1, 2]}

.. note::
  
   If using ``pymongo.GEOSPHERE``, we recommend using the ``$nearSphere`` operator.

To use the ``$maxDistance`` operator, you must import the ``~bson.son.SON`` module:

.. code-block:: python

   >>> from bson.son import SON
   >>> query = {"loc": SON([("$near", [3, 6]), ("$maxDistance", 100)])}
   >>> for doc in db.places.find(query).limit(3):
   ...     pprint.pprint(doc)
   ...
   {'_id': ObjectId('...'), 'loc': [2, 5]}
   {'_id': ObjectId('...'), 'loc': [4, 4]}
   {'_id': ObjectId('...'), 'loc': [1, 2]}

It's also possible to query for all items within a given rectangle
(specified by lower-left and upper-right coordinates):

.. code-block:: python

   >>> query = {"loc": {"$within": {"$box": [[2, 2], [5, 6]]}}}
   >>> for doc in db.places.find(query).sort("_id"):
   ...     pprint.pprint(doc)
   ...
   {'_id': ObjectId('...'), 'loc': [2, 5]}
   {'_id': ObjectId('...'), 'loc': [4, 4]}

Or a circle (specified by center point and radius):

.. code-block:: python

   >>> query = {"loc": {"$within": {"$center": [[0, 0], 6]}}}
   >>> for doc in db.places.find(query).sort("_id"):
   ...     pprint.pprint(doc)
   ...
   {'_id': ObjectId('...'), 'loc': [2, 5]}
   {'_id': ObjectId('...'), 'loc': [1, 2]}
   {'_id': ObjectId('...'), 'loc': [4, 4]}

You can also use the ``~bson.son.SON`` module to run ``geoNear`` queries:

.. code-block:: python

   >>> from bson.son import SON
   >>> db.command(SON([('geoNear', 'places'), ('near', [1, 2])]))
   {'ok': 1.0, 'stats': ...}

.. important::
  
   The ``geoNear`` command is deprecated starting in MongoDB 4.0. Use one of the following
   operations instead:

   * The ``$geoNear`` aggregation stage
   * The ``$near`` query operator
   * The ``$nearSphere`` query operator

.. tip::
  
   For more information about geospatial indexes, see the
   :manual:`MongoDB Server manual. </core/indexes/index-types/index-geospatial/>`
