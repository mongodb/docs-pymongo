.. _pymongo-aggregation:

Aggregation 
===========

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: stage, operation, explain, sort

Overview
--------

This guide describes how to perform aggregation with {+driver-short+}.

Sample Documents
----------------

The examples on this page use the following sample documents:

.. code-block:: python

   {"x": 1, "tags": ["dog", "cat"]}
   {"x": 2, "tags": ["cat"]}
   {"x": 2, "tags": ["mouse", "cat", "dog"]}
   {"x": 3, "tags": []}

.. _aggregate-examples:

Aggregation Example
-------------------

The following example shows how to use the ``~pymongo.collection.Collection.aggregate()``
method to count the number of occurrences of each tag in the ``tags`` array across
the collection.

First, create a pipeline, a Python list of dictionaries that describe the
aggregation stages. This example requires three stages: ``$unwind``, ``$group``, and
``$sort``. Then, pass the pipeline to the ``aggregate()`` method. 

.. code-block:: python

   >>> from bson.son import SON
   >>> pipeline = [
   ...     {"$unwind": "$tags"},
   ...     {"$group": {"_id": "$tags", "count": {"$sum": 1}}},
   ...     {"$sort": SON([("count", -1), ("_id", -1)])},
   ... ]
   >>> import pprint
   >>> pprint.pprint(list(db.things.aggregate(pipeline)))
   [{'_id': 'cat', 'count': 3},
    {'_id': 'dog', 'count': 2},
    {'_id': 'mouse', 'count': 1}]

.. important::
  
   Because Python dictionaries don't maintain the order of their elements, you should use
   ``~bson.son.SON`` or ``collections.OrderedDict`` where explicit ordering is required
   (for example, when performing a ``$sort`` operation).

Explaining Aggregations
-----------------------

The `PyMongoExplain <https://pypi.org/project/pymongoexplain/>`__ package
allows you to :manual:`explain </reference/command/explain/>` any CRUD operation by
providing a few convenience classes:

.. code-block:: python

   >>> from pymongoexplain import ExplainableCollection
   >>> ExplainableCollection(collection).aggregate(pipeline)
   {'ok': 1.0, 'queryPlanner': [...]}

You can also execute an aggregation by using the ``~pymongo.database.Database.command()``
method to execute the ``aggregate`` command. To explain an aggregation run in this way,
pass ``explain=True`` as an argument, as shown in the following example:

.. code-block:: python

   >>> db.command('aggregate', 'things', pipeline=pipeline, explain=True)
   {'ok': 1.0, 'stages': [...]}
