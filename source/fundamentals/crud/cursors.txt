.. _pymongo-cursors:

================
Tailable Cursors
================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: oplog

Overview
--------

By default, MongoDB automatically closes a cursor when the client has
exhausted all results in the cursor. However, for :manual:`capped collections </core/capped-collections/>`,
you can use a :manual:`tailable cursor </core/tailable-cursors/>` that remains
open after the client exhausts the results in the initial cursor.

Example
-------

The following example uses a tailable cursor to tail the oplog
of a replica-set member:

.. code-block:: python

   import time

   import pymongo

   client = pymongo.MongoClient()
   oplog = client.local.oplog.rs
   first = oplog.find().sort('$natural', pymongo.ASCENDING).limit(-1).next()
   print(first)
   ts = first['ts']
 
   while True:
       cursor = oplog.find({'ts': {'$gt': ts}},
                           cursor_type=pymongo.CursorType.TAILABLE_AWAIT,
                           oplog_replay=True)
       while cursor.alive:
           for doc in cursor:
               ts = doc['ts']
               print(doc)
           # You end up here if the find() method returns no documents, or if the
           # tailable cursor times out (no new documents are added to the
           # collection for more than 1 second).
           time.sleep(1)

For a capped collection, ``CursorType.TAILABLE_AWAIT`` is the
only option required to create a tailable cursor. When querying the
oplog, the ``oplog_replay`` option enables an optimization to quickly
find the ``ts`` value. You can use the ``oplog_replay`` option
only when querying the oplog. Starting in MongoDB 4.4,
the server ignores this option, because the MongoDB query engine automatically
optimizes queries against the oplog.
