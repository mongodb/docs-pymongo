.. _pymongo-csot:

Client Side Operation Timeout
=============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: error, blocking

PyMongo 4.2 introduced the ``~pymongo.timeout()`` method and the ``timeoutMS``
URI and keyword argument to the ``~pymongo.mongo_client.MongoClient`` class.
These features allow applications to more easily limit the amount of time that
one or more operations can execute before control is returned to the app. This
timeout applies to all of the work done to execute the operation, including
server selection, connection checkout, serialization, and
server-side execution.

Basic Usage
-----------

The following example uses the ``~pymongo.timeout()`` method to configure a 10-second
timeout for a ``~pymongo.collection.Collection.insert_one()``.

.. code-block:: python

   import pymongo
   with pymongo.timeout(10):
       coll.insert_one({"name": "Nunu"})

.. note::
  
   The ``~pymongo.timeout()`` method applies to all {+driver-short+} operations inside the
   ``with`` block.

The following example ensures that both the ``insert_one()`` and ``find()`` methods
finish within 10 seconds total. If they don't, {+driver-short+} raises a timeout error.

.. code-block:: python

   with pymongo.timeout(10):
       coll.insert_one({"name": "Nunu"})
       coll.find_one({"name": "Nunu"})

If you nest calls to the ``~pymongo.timeout()`` method, the deadline of the inner method
call is capped by the deadline of the outer method call. The deadline can only be
shortened, not extended.

When execution enters a nested ``timeout`` block, the outer ``timeout`` deadline is paused.
When execution exits the nested ``timeout`` block, the previous ``timeout`` deadline resumes.
The following example shows how nested calls to the ``timeout()`` method interact:

.. code-block:: python

   with pymongo.timeout(5):
       coll.find_one()  # Uses the 5 second deadline.
       with pymongo.timeout(3):
           coll.find_one() # Uses the 3 second deadline.
       coll.find_one()  # Uses the original 5 second deadline.
       with pymongo.timeout(10):
           coll.find_one()  # Still uses the original 5 second deadline.
       coll.find_one()  # Uses the original 5 second deadline.

Timeout Errors
--------------

When execution enters a ``~pymongo.timeout()`` ``with`` block, a deadline is set
for the entire block. When that deadline is exceeded, any blocking {+driver-short+}
operation will raise a timeout exception. For example:

.. code-block:: python

   try:
       with pymongo.timeout(10):
           coll.insert_one({"name": "Nunu"})
           time.sleep(10)
           # The deadline has now expired, the next operation will raise
           # a timeout exception.
           coll.find_one({"name": "Nunu"})
   except PyMongoError as exc:
       if exc.timeout:
           print(f"block timed out: {exc!r}")
       else:
           print(f"failed with non-timeout error: {exc!r}")

The ``pymongo.errors.PyMongoError.timeout`` property (added in PyMongo 4.2)
is ``True`` when the error was caused by a timeout and ``False`` otherwise.

The timeoutMS URI Option
------------------------

PyMongo 4.2 also added support for the ``timeoutMS`` URI and keyword argument to
``~pymongo.mongo_client.MongoClient``. When this option is configured, the
client automatically applies the timeout to each API call. For example:

.. code-block:: python

   client = MongoClient("mongodb://localhost/?timeoutMS=10000")
   coll = client.test.test
   coll.insert_one({"name": "Nunu"})  # Uses a 10-second timeout.
   coll.find_one({"name": "Nunu"})  # Also uses a 10-second timeout.

The above code example is roughly equivalent to the following example:

.. code-block:: python

   client = MongoClient()
   coll = client.test.test
   with pymongo.timeout(10):
       coll.insert_one({"name": "Nunu"})
   with pymongo.timeout(10):
       coll.find_one({"name": "Nunu"})

pymongo.timeout Overrides timeoutMS
-----------------------------------

The ``~pymongo.timeout()`` method overrides ``timeoutMS``. Within a
``~pymongo.timeout`` block, a client's ``timeoutMS`` option is ignored:

.. code-block:: python

   client = MongoClient("mongodb://localhost/?timeoutMS=10000")
   coll = client.test.test
   coll.insert_one({"name": "Nunu"})  # Uses the client's 10-second timeout.
   # pymongo.timeout overrides the client's timeoutMS.
   with pymongo.timeout(20):
       coll.insert_one({"name": "Nunu"})  # Uses the 20-second timeout.
   with pymongo.timeout(5):
       coll.find_one({"name": "Nunu"})  # Uses the 5-second timeout.

pymongo.timeout Is Thread-safe
------------------------------

The ``~pymongo.timeout()`` method is thread-safe. The timeout applies only to the current
thread, and multiple threads can configure different timeouts in parallel.

pymongo.timeout Is asyncio-safe
-------------------------------

The ``~pymongo.timeout()`` method is ``asyncio``-safe. The timeout applies only to the
current Task, and multiple Tasks can configure different timeouts concurrently.

The ``~pymongo.timeout()`` method can be used identically in
`Motor <https://github.com/mongodb/motor>`__: 

.. code-block:: python

   import motor.motor_asyncio
   client = motor.motor_asyncio.AsyncIOMotorClient()
   coll = client.test.test
   with pymongo.timeout(10):
       await coll.insert_one({"name": "Nunu"})
       await coll.find_one({"name": "Nunu"})

Troubleshooting
---------------

In code, you can identify timeout errors by using the ``pymongo.errors.PyMongoError.timeout``
property. Some specific timeout errors examples are described below.

When the client was unable to find an available server to run the operation
within the given timeout:

.. code-block:: python

   pymongo.errors.ServerSelectionTimeoutError: No servers found yet, Timeout: -0.00202266700216569s, Topology Description: <TopologyDescription id: 63698e87cebfd22ab1bd2ae0, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None>]>

When either the client was unable to establish a connection within the given
timeout or the operation was sent but the server was not able to respond in time:

.. code-block:: python

   pymongo.errors.NetworkTimeout: localhost:27017: timed out

When the server cancelled the operation because it exceeded the given timeout.
Note that the operation may have partially completed on the server (depending
on the operation).

.. code-block:: python

   pymongo.errors.ExecutionTimeout: operation exceeded time limit, full error: {'ok': 0.0, 'errmsg': 'operation exceeded time limit', 'code': 50, 'codeName': 'MaxTimeMSExpired'}

When the client cancelled the operation because it was not possible to complete
within the given timeout:

.. code-block:: python

   pymongo.errors.ExecutionTimeout: operation would exceed time limit, remaining timeout:0.00196 <= network round trip time:0.00427

When the client attempted a write operation but the server could not replicate
that operation (according to the configured write concern) within the given timeout:

.. code-block:: python

   pymongo.errors.WTimeoutError: operation exceeded time limit, full error: {'code': 50, 'codeName': 'MaxTimeMSExpired', 'errmsg': 'operation exceeded time limit', 'errInfo': {'writeConcern': {'w': 1, 'wtimeout': 0}}}

The same error as above, but for the ``~pymongo.collection.Collection.insert_many()`` method
or the ``~pymongo.collection.Collection.bulk_write()`` method:

.. code-block:: python

   pymongo.errors.BulkWriteError: batch op errors occurred, full error: {'writeErrors': [], 'writeConcernErrors': [{'code': 50, 'codeName': 'MaxTimeMSExpired', 'errmsg': 'operation exceeded time limit', 'errInfo': {'writeConcern': {'w': 1, 'wtimeout': 0}}}], 'nInserted': 2, 'nUpserted': 0, 'nMatched': 0, 'nModified': 0, 'nRemoved': 0, 'upserted': []}
