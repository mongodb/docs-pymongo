.. uses high-availability.rst, tutorial.rst

.. _pymongo-connect:

==================
Connect to MongoDB
==================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: connect, nodes, replica set

In this guide, you can learn how to connect to a MongoDB client and replica set using the
{+driver-short+} driver.

Connecting to MongoDB
---------------------
To connect to  MongoDB, create a ``~pymongo.mongo_client.MongoClient`` to the run your **mongod**
instance by using the following code to connect on the default host and port:

.. code-block:: python

   >>> from pymongo import MongoClient
   >>> client = MongoClient()

You can also specify the host and port explicitly by using the following
snippet:

.. code-block:: python

   >>> client = MongoClient("localhost", 27017)

Or use the MongoDB URI format:

.. code-block:: python

   >>> client = MongoClient("mongodb://localhost:27017/")

Connecting to a Replica Set
---------------------------

This tutorial shows you how to launch a new replica set, and handle
initialization and normal connections with PyMongo. For in-depth documentation
about replica sets, including replica set migration, see the `replica set
documentation <https://www.mongodb.com/docs/manual/replication/>`__.

Starting a Replica Set
~~~~~~~~~~~~~~~~~~~~~~~

.. warning:: Replica sets should always use multiple nodes in
   production. Putting all set members on the same physical node is
   only recommended for testing and development.

In the terminal, start three ``mongod`` processes with the replica set name "foo", each on a
different port and with a different ``dbpath``, by using the following commands:

.. code-block:: bash

  $ mkdir -p /data/db0 /data/db1 /data/db2
  $ mongod --port 27017 --dbpath /data/db0 --replSet foo

.. code-block:: bash

  $ mongod --port 27018 --dbpath /data/db1 --replSet foo

.. code-block:: bash

  $ mongod --port 27019 --dbpath /data/db2 --replSet foo

Your nodes are now running.

Initializing and Connecting to the Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Before you can use your nodes, you must initialize your replica set and set one
node as the primary node. Note that the following process is specific to uninitialized
replica sets.

To initialize the set, connect directly to a single node and run the
initiate command using the ``directConnection`` option:

.. code-block:: python

   >>> from pymongo import MongoClient
   >>> c = MongoClient('localhost', 27017, directConnection=True)

.. note:: 
   You can connect through any of the nodes you created, but only the node you
   connect through is allowed to contain initial data. In the previous example, only
   the node running on port 27017 can contain data.

After connecting to a single node, run the initiate command on all nodes:

.. code-block:: python

   >>> config = {'_id': 'foo', 'members': [
   ...     {'_id': 0, 'host': 'localhost:27017'},
   ...     {'_id': 1, 'host': 'localhost:27018'},
   ...     {'_id': 2, 'host': 'localhost:27019'}]}
   >>> c.admin.command("replSetInitiate", config)
   {'ok': 1.0, ...}

The three ``mongod`` servers are now online as a replica set.

Connecting to an Existing Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can connect to an existing replica set by using the
the ``~pymongo.mongo_client.MongoClient`` constructor. Specify
one or more members of the set and, optionally, the replica set name.
Each of the following connects to the replica set created in the previous section:

.. code-block:: python

   >>> MongoClient('localhost')
   MongoClient(host=['localhost:27017'], ...)
   >>> MongoClient('localhost', replicaset='foo')
   MongoClient(host=['localhost:27017'], replicaset='foo', ...)
   >>> MongoClient('localhost:27018', replicaset='foo')
   MongoClient(['localhost:27018'], replicaset='foo', ...)
   >>> MongoClient('localhost', 27019, replicaset='foo')
   MongoClient(['localhost:27019'], replicaset='foo', ...)
   >>> MongoClient('mongodb://localhost:27017,localhost:27018/')
   MongoClient(['localhost:27017', 'localhost:27018'], ...)
   >>> MongoClient('mongodb://localhost:27017,localhost:27018/?replicaSet=foo')
   MongoClient(['localhost:27017', 'localhost:27018'], replicaset='foo', ...)

The addresses passed to the ``~pymongo.mongo_client.MongoClient`` method are called
the *seeds*. As long as at least one of the seeds is online, MongoClient
discovers all the members in the replica set, and determines which is the
current primary and which are secondaries or arbiters. Each seed must be the
address of a single ``mongod``. Multihomed and round robin DNS addresses are
**not** supported.

.. note::
   The ``~pymongo.mongo_client.MongoClient`` constructor is non-blocking. That is,
   the constructor returns immediately while the client connects to the replica
   set using background threads. If you create a client and immediately
   print the string representation of its
   ``~pymongo.mongo_client.MongoClient.nodes`` attribute, the list may be
   empty initially. Add a pause to your code to allow MongoClient to discover the whole replica
   set:

   .. code-block:: python

      >>> from time import sleep
      >>> c = MongoClient(replicaset='foo'); print(c.nodes); sleep(0.1); print(c.nodes)
      frozenset([])
      frozenset([('localhost', 27019), ('localhost', 27017), ('localhost', 27018)])

     You do not need to wait for replica set discovery for your application to
     perform operations. The client waits to discover a suitable member before it
     attempts any operation.

Handling Failover
~~~~~~~~~~~~~~~~~

When a failover occurs, PyMongo automatically attempts to find the
new primary node and perform subsequent operations on that node.
This example shows how a failover behaves. 

Connect to the replica set and perform some basic operations:

.. code-block:: python

   >>> db = MongoClient("localhost", replicaSet='foo').test
   >>> db.test.insert_one({"x": 1}).inserted_id
   ObjectId('...')
   >>> db.test.find_one()
   {'x': 1, '_id': ObjectId('...')}

By checking the host and port, you can see that you're connected to the primary member,
``localhost:27017``:

.. code-block:: python

   >>> db.client.address
   ('localhost', 27017)

`Take the node offline <https://www.mongodb.com/docs/manual/tutorial/remove-replica-set-member/#remove-members-from-replica-set>`__ and attempt another operation:

.. code-block:: python

   >>> db.test.find_one()
   Traceback (most recent call last):
   pymongo.errors.AutoReconnect: ...

You get an ``AutoReconnect`` exception. This means
that the driver was not able to connect to the primary, but that it will attempt to
automatically reconnect on subsequent operations. When this exception
is raised, the application code needs to decide whether to retry the
operation or to continue without a successful response.

Subsequent attempts to run the query might give the same
exception. After several seconds, the replica set will failover and
elect a new primary, the driver will connect to the new primary, and
the operation will succeed:

.. code-block:: python

   >>> db.test.find_one()
   {'x': 1, '_id': ObjectId('...')}
   >>> db.client.address
   ('localhost', 27018)

If you bring the original primary back up, it will rejoin the set as a secondary member.