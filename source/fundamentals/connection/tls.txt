.. uses tls.rst, atlas.rst

.. _pymongo-tls:

===================
TLS/SSL and PyMongo
===================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: security, authentication, transport layer security

Overview
--------

{+driver-short+} supports connecting to MongoDB over TLS/SSL. This guide covers the
configuration options supported by {+driver-short+}. To learn how to configure
MongoDB for TLS/SSL, see :manual:`the TLS/SSL configuration guide
</tutorial/configure-ssl/>` in the Server manual.

.. warning:: 

   Industry best practices recommend, and some regulations require,
   the use of TLS 1.1 or newer. Though {+driver-short+} doesn't require
   application changes to use the newest protocols, some operating systems or
   versions may not provide an OpenSSL version new enough to support them.

   Users of macOS older than 10.13 (High Sierra) must install Python
   from `python.org <https://www.python.org/downloads/>`__, `homebrew
   <https://brew.sh/>`__, `macports <https://www.macports.org/>`_, or another similar source.
   
   Users of Linux, or other non-macOS Unix, can check their OpenSSL version like
   this:
   
   .. code-block:: python
   
      $ openssl version
   
   If the version number is less than 1.0.1, support for TLS 1.1 or newer is not
   available. Contact your operating system vendor for a solution, or upgrade to
   a newer distribution.
   
   You can check your Python interpreter by installing the `requests <https://pypi.python.org/pypi/requests>`_ module
   and executing the following command:
   
   .. code-block:: python
   
      python -c "import requests; print(requests.get('https://www.howsmyssl.com/a/check', verify=False).json()['tls_version'])"
   
   You should see "TLS 1.X" where X is >= 1.
   
   You can read more about TLS versions and their security implications here: 
   `<https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Security_Cheat_Sheet.html#only-support-strong-protocols>`_

Basic Configuration
-------------------

Often, connecting to MongoDB over TLS/SSL requires nothing more than
passing ``tls=True`` as a keyword parameter to
``~pymongo.mongo_client.MongoClient``:

.. code-block:: python

   >>> client = pymongo.MongoClient('example.com', tls=True)

Or by passing ``tls=true`` in the connection URI:

.. code-block:: python

   >>> client = pymongo.MongoClient('mongodb://example.com/?tls=true')

This configures {+driver-short+} to connect to the server using TLS, verify the server's
certificate, and verify that the host you are attempting to connect to is listed
by that certificate.

Certificate Verification Policy
-------------------------------

By default, {+driver-short+} requires a certificate from the server when
TLS is enabled. You can configure this by using the ``tlsAllowInvalidCertificates``
option. To disable this requirement, pass ``tlsAllowInvalidCertificates=True``
as a keyword parameter:

.. code-block:: python

   >>> client = pymongo.MongoClient('example.com',
   ...                              tls=True,
   ...                              tlsAllowInvalidCertificates=True)

Or, in the connection sURI:

.. code-block:: python

   >>> uri = 'mongodb://example.com/?tls=true&tlsAllowInvalidCertificates=true'
   >>> client = pymongo.MongoClient(uri)

Specifying a CA File
--------------------

Sometimes you may want to configure {+driver-short+} to use a specific set of CA
certificates. This is most often the case when you are acting as your own
certificate authority, rather than using server certificates signed by a well
known authority. The ``tlsCAFile`` option takes a path to a CA file. You can
pass it as a keyword parameter:

.. code-block:: python

   >>> client = pymongo.MongoClient('example.com',
   ...                              tls=True,
   ...                              tlsCAFile='/path/to/ca.pem')

Or, in the connection URI:

.. code-block:: python

   >>> uri = 'mongodb://example.com/?tls=true&tlsCAFile=/path/to/ca.pem'
   >>> client = pymongo.MongoClient(uri)

Specifying a Certificate Revocation List
----------------------------------------

The ``tlsCRLFile`` option takes a path to a CRL file. You can pass it
as a keyword parameter:

.. code-block:: python

   >>> client = pymongo.MongoClient('example.com',
   ...                              tls=True,
   ...                              tlsCRLFile='/path/to/crl.pem')

Or, in the connection URI:

.. code-block:: python

   >>> uri = 'mongodb://example.com/?tls=true&tlsCRLFile=/path/to/crl.pem'
   >>> client = pymongo.MongoClient(uri)

.. note:: 
  
   You cannot use certificate revocation lists and :ref:`OCSP` together.

Client Certificates
-------------------

You can configure {+driver-short+} to present a client certificate by using the
``tlsCertificateKeyFile`` option:

.. code-block:: python

   >>> client = pymongo.MongoClient('example.com',
   ...                              tls=True,
   ...                              tlsCertificateKeyFile='/path/to/client.pem')

If the private key for the client certificate is stored in a separate file,
you should concatenate it with the certificate file. For example, to
concatenate a PEM-formatted certificate file named ``cert.pem`` and a PEM-formatted
keyfile named ``key.pem`` into a single file named ``combined.pem``, on Unix systems,
users can run:

.. code-block:: python

   $ cat key.pem cert.pem > combined.pem

You can configure {+driver-short+} with the concatenated certificate keyfile by using the
``tlsCertificateKeyFile`` option:

.. code-block:: python

   >>> client = pymongo.MongoClient('example.com',
   ...                              tls=True,
   ...                              tlsCertificateKeyFile='/path/to/combined.pem')

If the private key contained in the certificate keyfile is encrypted, users
can provide a password or passphrase to decrypt the encrypted private keys
by using the ``tlsCertificateKeyFilePassword`` option:

.. code-block:: python

   >>> client = pymongo.MongoClient('example.com',
   ...                              tls=True,
   ...                              tlsCertificateKeyFile='/path/to/combined.pem',
   ...                              tlsCertificateKeyFilePassword=<passphrase>)

You can also pass these options as part of the MongoDB URI.

.. _OCSP:

OCSP
----

Starting with {+driver-short+} 3.11, if {+driver-short+} was installed with the
``ocsp`` option, certificate revocation checking is enabled by way of :wikipedia:`OCSP (Online Certification
Status Protocol) <Online_Certificate_Status_Protocol>`:

.. code-block:: python

   python -m pip install pymongo[ocsp]

MongoDB 4.4+ :wikipedia:`staples OCSP responses <OCSP_stapling>`
to the TLS handshake, which {+driver-short+} verifies. The TLS handshake fails if
the stapled OCSP response is invalid, or indicates that the peer certificate is
revoked.

When connecting to a server version older than 4.4, or when a 4.4+ version of
MongoDB does not staple an OCSP response, {+driver-short+} attempts to connect
directly to an OCSP endpoint, if the peer certificate specified one. The TLS
handshake only fails in this case if the response indicates that the
certificate is revoked. Invalid or malformed responses are ignored,
favoring availability over maximum security.

.. _TLSErrors:

Troubleshooting TLS Errors
--------------------------

TLS errors often fall into three categories: 

- certificate verification failure
- protocol version mismatch 
- certificate revocation checking failure. 

An error message similar to the following means that OpenSSL was not able to verify the
server's certificate:

.. code-block:: python

   [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed

This often occurs because OpenSSL lacks access to the system's
root certificates, or the certificates are out of date. Linux users should
ensure that they have the latest root certificate updates installed from
their Linux vendor. MacOS users using Python 3.7 or newer downloaded
from python.org `may have to run a script included with python
<https://bugs.python.org/issue29065#msg283984>`__ to install
root certificates:

.. code-block:: python

   open "/Applications/Python <YOUR PYTHON VERSION>/Install Certificates.command"

Users of older PyPy portable versions may have to `set an environment
variable <https://github.com/squeaky-pl/portable-pypy/issues/15>`__ to tell
OpenSSL where to find root certificates. Do this by using the `certifi
module <https://pypi.org/project/certifi/>`__ from PyPi:

.. code-block:: python

   $ pypy -m pip install certifi
   $ export SSL_CERT_FILE=$(pypy -c "import certifi; print(certifi.where())")

An error message similar to the following message means that the OpenSSL
version used by Python does not support a new enough TLS protocol to connect
to the server:

.. code-block:: python

   [SSL: TLSV1_ALERT_PROTOCOL_VERSION] tlsv1 alert protocol version

Industry best practices recommend, and some regulations require, that older
TLS protocols be disabled in some MongoDB deployments. Some deployments may
disable TLS 1.0, others may disable TLS 1.0 and TLS 1.1. See the warning
earlier in this document for troubleshooting steps and solutions.

An error message similar to the following message means that certificate
revocation checking failed:

.. code-block:: python

   [('SSL routines', 'tls_process_initial_server_flight', 'invalid status response')]

See :ref:`OCSP` for more details.

Python 3.10+ Incompatibilities with TLS/SSL on MongoDB <= 4.0
-------------------------------------------------------------

Note that `changes made to the ssl module in Python 3.10+
<https://docs.python.org/3/whatsnew/3.10.html#ssl>`__ might cause incompatibilities
with MongoDB <= 4.0. The following are some example errors that might occur with this
combination:

.. code-block:: python

   SSL handshake failed: localhost:27017: [SSL: SSLV3_ALERT_HANDSHAKE_FAILURE] sslv3 alert handshake failure (_ssl.c:997)
   SSL handshake failed: localhost:27017: EOF occurred in violation of protocol (_ssl.c:997)

The MongoDB server logs might show the following error:

.. code-block:: python

   2021-06-30T21:22:44.917+0100 E NETWORK  [conn16] SSL: error:1408A0C1:SSL routines:ssl3_get_client_hello:no shared cipher

To resolve this issue, use Python <=3.10, upgrade to MongoDB 4.2+, or install
{+driver-short+} with the :ref:`OCSP` extra, which relies on PyOpenSSL.
