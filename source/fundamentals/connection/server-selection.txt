.. uses server-selection.rst

.. _pymongo-server-selection:

================
Server Selection
================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example

Users can exert fine-grained control over the :manual:`Server Selection
Algorithm </core/read-preference-mechanics/>` by setting the ``server_selector``
option on the ``~pymongo.MongoClient`` to an appropriate callable. This guide
shows you how to use this functionality to prefer servers running on ``localhost``.

.. warning::

   Use of custom server selector functions is a power-user feature. Misusing
   custom server selectors can have unintended consequences, such as degraded
   read or write performance.

Example: Selecting Servers Running on ``localhost``
---------------------------------------------------

First, write the server selector function.
The server selector function should accept a list of
``~pymongo.server_description.ServerDescription`` objects, and return a
list of server descriptions that are suitable for the read or write operation.
A server selector must not create or modify
``~pymongo.server_description.ServerDescription`` objects, and must return
the selected instances unchanged.

This example shows a server selector that prioritizes servers running on
``localhost``. This can be desirable when using a sharded cluster with multiple
``mongos`` servers, because locally run queries usually have lower latency and higher
throughput. However, the benefit of preferring ``localhost`` is highly dependent on the
application.

In addition to comparing the hostname with ``localhost``, the server selector
function accounts for the edge case when no servers are running on
``localhost``. In this case, the default server selection logic
prevails by returning the received server description list unchanged.
Failure to do this renders the client unable to communicate with MongoDB
if no servers are running on ``localhost``.

The following example implements the server selection logic:

.. code-block:: python

   >>> def server_selector(server_descriptions):
   ...     servers = [
   ...         server for server in server_descriptions if server.address[0] == "localhost"
   ...     ]
   ...     if not servers:
   ...         return server_descriptions
   ...     return servers
   ...

Finally, create a ``~pymongo.MongoClient`` instance with the
server selector:

.. code-block:: python

   >>> client = MongoClient(server_selector=server_selector)

Server Selection Process
------------------------

This section describes the server selection process for reads and
writes. For writes, the driver performs the following operations, in order,
during the selection process:

1. Select all writeable servers from the list of known hosts. For a replica set,
   the writeable server is the primary. For a sharded cluster, the
   writeable servers are all the known ``mongos`` servers.

#. Apply the user-defined server selector function. The custom server
   selector is **not** called if there are no servers left from the previous
   filtering stage.

#. Apply the ``localThresholdMS`` setting to the list of remaining hosts. This
   whittles the host list down to contain only servers whose latency is at most
   ``localThresholdMS`` milliseconds higher than the lowest observed latency.

#. Select a server at random from the remaining host list. The appropriate
   operation is then performed against the selected server.

For reads, the process is identical, except for the first step.
Instead of selecting all writeable servers, the driver selects all servers from the
list of known hosts that match the user's
``~pymongo.read_preferences.ReadPreference``. For example, for a 3-member
replica set with a ``~pymongo.read_preferences.Secondary`` read preference,
the driver selects all available secondaries.
