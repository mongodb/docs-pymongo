.. _pymongo-type_hints:

Type Hints
==========

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: tutorial
 
.. meta::
   :keywords: mypy, type safety, compile time, type check, static

If your IDE is configured to use `type hints <https://docs.python.org/3/library/typing.html>`__,
it can suggest more appropriate completions and highlight errors in your code.

All of the public APIs in PyMongo are fully type hinted, and several of them support
generic parameters for the type of document object returned when decoding BSON documents.

For a larger set of examples that use types, see the PyMongo
`test_typing module <https://github.com/mongodb/mongo-python-driver/blob/master/test/test_typing.py>`__.

.. note::

   You can also use the `Mypy <https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html>`__
   tool from your command line or in continuous-integration tests. However, due to
   `limitations in Mypy <https://github.com/python/mypy/issues/3737>`__, the default
   values for generic document types are not yet available. They will eventually be
   ``Dict[str, any]``).

   If you are using Mypy and would like to opt out of using the provided types, add the
   following lines to your
   `Mypy configuration file <https://mypy.readthedocs.io/en/stable/config_file.html>`__:

   .. code-block:: python

      [mypy-pymongo]
      follow_imports = False

Basic Usage
-----------

The following code example specifies the ``MongoClient`` type for the ``MongoClient`` object, but
doesn't specify a type for documents. Therefore, {+driver-short+}
uses the default, unspecified type for these documents:

.. code-block:: python
   :emphasize-lines: 2

   >>> from pymongo import MongoClient
   >>> client: MongoClient = MongoClient()
   >>> collection = client.test.test
   >>> inserted = collection.insert_one({"x": 1, "tags": ["dog", "cat"]})
   >>> retrieved = collection.find_one({"x": 1})
   >>> assert isinstance(retrieved, dict)

To specify a type for documents, you can use the ``Dict[str, Any]`` type when you
create the ``MongoClient`` object, as shown in the following example:

.. code-block:: python
   :emphasize-lines: 1,3

   >>> from typing import Any, Dict
   >>> from pymongo import MongoClient
   >>> client: MongoClient[Dict[str, Any]] = MongoClient()
   >>> collection = client.test.test
   >>> inserted = collection.insert_one({"x": 1, "tags": ["dog", "cat"]})
   >>> retrieved = collection.find_one({"x": 1})
   >>> assert isinstance(retrieved, dict)

Typed Client
------------

When you create a ``MongoClient`` object, you can specify the document type used to
decode BSON documents.

The following example shows how to specify a ``~bson.raw_bson.RawBSONDocument`` document type:

.. code-block:: python

   >>> from pymongo import MongoClient
   >>> from bson.raw_bson import RawBSONDocument
   >>> client = MongoClient(document_class=RawBSONDocument)
   >>> collection = client.test.test
   >>> inserted = collection.insert_one({"x": 1, "tags": ["dog", "cat"]})
   >>> result = collection.find_one({"x": 1})
   >>> assert isinstance(result, RawBSONDocument)

You can also use subclasses of ``collections.abc.Mapping`` such as ``~bson.son.SON``,
as shown in the following example:

.. code-block:: python

   >>> from bson import SON
   >>> from pymongo import MongoClient
   >>> client = MongoClient(document_class=SON[str, int])
   >>> collection = client.test.test
   >>> inserted = collection.insert_one({"x": 1, "y": 2})
   >>> result = collection.find_one({"x": 1})
   >>> assert result is not None
   >>> assert result["x"] == 1

.. note::
  
   When you use the ``~bson.son.SON`` document type, you must also specify types
   for the key and value. The preceding example uses ``SON[str, int]``.

Typed Collection
----------------

If you use a well-defined schema for the the data in a
``~pymongo.collection.Collection``, you can use the ``~typing.TypedDict`` class
to declare types for the values of the elements in the collection.

.. important::
   
   The ``TypedDict`` class is available only in Python 3.8 and later.
   To use ``TypedDict`` in earlier versions of Python, install the ``typing_extensions``
   package.

In the following example, ``Movie`` is an instance of ``TypedDict``. Each ``Movie`` object
contains two key-value pairs: ``name``, a string key with a string value, and
``year``, a string key with an integer value.

.. code-block:: python
   :emphasize-lines: 1, 4-6

   >>> from typing import TypedDict
   >>> from pymongo import MongoClient
   >>> from pymongo.collection import Collection
   >>> class Movie(TypedDict):
   ...     name: str
   ...     year: int
   ...
   >>> client: MongoClient = MongoClient()
   >>> collection: Collection[Movie] = client.test.test
   >>> inserted = collection.insert_one(Movie(name="Jurassic Park", year=1993))
   >>> result = collection.find_one({"name": "Jurassic Park"})
   >>> assert result is not None
   >>> assert result["year"] == 1993

This same typing scheme works for all of the insert methods:

- ``~pymongo.collection.Collection.insert_one()``
- ``~pymongo.collection.Collection.insert_many()``
- ``~pymongo.collection.Collection.bulk_write()``

For ``bulk_write()``, both the ``~pymongo.operations.InsertOne()`` and
``~pymongo.operations.ReplaceOne()`` operators are generic.

The following code example shows that the results are the same as the preceding examples
when you call the ``bulk_write()`` method:

.. code-block:: python

   >>> from typing import TypedDict
   >>> from pymongo import MongoClient
   >>> from pymongo.operations import InsertOne
   >>> from pymongo.collection import Collection
   >>> client: MongoClient = MongoClient()
   >>> collection: Collection[Movie] = client.test.test
   >>> inserted = collection.bulk_write([InsertOne(Movie(name="Jurassic Park", year=1993))])
   >>> result = collection.find_one({"name": "Jurassic Park"})
   >>> assert result is not None
   >>> assert result["year"] == 1993
   >>> # This will raise a type-checking error, despite being present, because it is added by PyMongo.
   >>> assert result["_id"]  # type:ignore[typeddict-item]

Modeling Document Types with TypedDict
--------------------------------------

All `schema validation <https://www.mongodb.com/docs/manual/core/schema-validation/#when-to-use-schema-validation>`__
for inserts and updates is done on the server. These methods automatically add an ``_id``
field to each document that doesn't include one. There are three ways to handle the ``_id``
field in your custom ``TypedDict`` class.

If you don't specify the ``_id`` field, {+driver-short+} automatically inserts it.
You can retrieve the value of the field at runtime, but you'll see a type error
at compile time, as shown in the following example:

.. code-block:: python
   :emphasize-lines: 12-13

   >>> from typing import TypedDict
   >>> from pymongo import MongoClient
   >>> from pymongo.collection import Collection
   >>> class Movie(TypedDict):
   ...     name: str
   ...     year: int
   ...
   >>> client: MongoClient = MongoClient()
   >>> collection: Collection[Movie] = client.test.test
   >>> inserted = collection.insert_one(Movie(name="Jurassic Park", year=1993))
   >>> result = collection.find_one({"name": "Jurassic Park"})
   >>> # _id is present but was added by PyMongo; this will raise a type-checking error
   >>> assert result["_id"]

You can ignore this type error by adding a ``# type:ignore`` comment at the end of
the line, as shown in the following example:

.. code-block:: python
   :emphasize-lines: 13

   >>> from typing import TypedDict
   >>> from pymongo import MongoClient
   >>> from pymongo.collection import Collection
   >>> class Movie(TypedDict):
   ...     name: str
   ...     year: int
   ...
   >>> client: MongoClient = MongoClient()
   >>> collection: Collection[Movie] = client.test.test
   >>> inserted = collection.insert_one(Movie(name="Jurassic Park", year=1993))
   >>> result = collection.find_one({"name": "Jurassic Park"})
   >>> # _id is present but was added by PyMongo; this will raise a type-checking error
   >>> assert result["_id"]  # type:ignore[typeddict-item]

If you explicitly specify a value for the ``_id`` field, every instance of your custom
``TypedDict`` class must have a value for ``_id``.

A third alternative is to install the ``~typing.NotRequired`` package. When you use this
package, you can access the ``_id`` field at run-time, but you won't see a type error, and
you don't need to include the field in every instance of your class.

The following example shows how to implement these three approaches to the ``_id`` field:

.. code-block:: python

   >>> from typing import TypedDict, NotRequired
   >>> from pymongo import MongoClient
   >>> from pymongo.collection import Collection
   >>> from bson import ObjectId
   >>> class Movie(TypedDict):
   ...     name: str
   ...     year: int
   ...
   >>> class ExplicitMovie(TypedDict):
   ...     _id: ObjectId
   ...     name: str
   ...     year: int
   ...
   >>> class NotRequiredMovie(TypedDict):
   ...     _id: NotRequired[ObjectId]
   ...     name: str
   ...     year: int
   ...
   >>> client: MongoClient = MongoClient()
   >>> collection: Collection[Movie] = client.test.test
   >>> inserted = collection.insert_one(Movie(name="Jurassic Park", year=1993))
   >>> result = collection.find_one({"name": "Jurassic Park"})
   >>> assert result is not None
   >>> # This will yield a type-checking error, despite being present, because it is added by PyMongo.
   >>> assert result["_id"]  # type:ignore[typeddict-item]
   >>> collection: Collection[ExplicitMovie] = client.test.test
   >>> # Note that the _id keyword argument must be supplied
   >>> inserted = collection.insert_one(
   ...     ExplicitMovie(_id=ObjectId(), name="Jurassic Park", year=1993)
   ... )
   >>> result = collection.find_one({"name": "Jurassic Park"})
   >>> assert result is not None
   >>> # This will not raise a type-checking error.
   >>> assert result["_id"]
   >>> collection: Collection[NotRequiredMovie] = client.test.test
   >>> # Note the lack of _id, similar to the first example
   >>> inserted = collection.insert_one(NotRequiredMovie(name="Jurassic Park", year=1993))
   >>> result = collection.find_one({"name": "Jurassic Park"})
   >>> assert result is not None
   >>> # This will not raise a type-checking error, despite not being provided explicitly.
   >>> assert result["_id"]

.. important::
   
   The ``NotRequired`` class is available only in Python 3.11 and later.
   To use ``NotRequired`` in earlier versions of Python, install the ``typing_extensions``
   package.

Typed Database
--------------

You can also use the ``TypedDict`` class to declare that all documents in a database
match a well-defined schema, as shown in the following example:

.. code-block:: python
   :emphasize-lines: 9
 
   >>> from typing import TypedDict
   >>> from pymongo import MongoClient
   >>> from pymongo.database import Database
   >>> class Movie(TypedDict):
   ...     name: str
   ...     year: int
   ...
   >>> client: MongoClient = MongoClient()
   >>> db: Database[Movie] = client.test
   >>> collection = db.test
   >>> inserted = collection.insert_one({"name": "Jurassic Park", "year": 1993})
   >>> result = collection.find_one({"name": "Jurassic Park"})
   >>> assert result is not None
   >>> assert result["year"] == 1993

Typed Command
-------------

When using the the ``~pymongo.database.Database.command()`` method, you can specify
the document type by providing a custom ``~bson.codec_options.CodecOptions``:

.. code-block:: python
   :emphasize-lines: 3, 5

   >>> from pymongo import MongoClient
   >>> from bson.raw_bson import RawBSONDocument
   >>> from bson import CodecOptions
   >>> client: MongoClient = MongoClient()
   >>> options = CodecOptions(RawBSONDocument)
   >>> result = client.admin.command("ping", codec_options=options)
   >>> assert isinstance(result, RawBSONDocument)

Custom ``collections.abc.Mapping`` subclasses and ``~typing.TypedDict``
are also supported document types. Use the following syntax for ``~typing.TypedDict``:

.. code-block:: python
  
   options: CodecOptions[MyTypedDict] = CodecOptions(...)

Typed BSON Decoding
-------------------

You can specify the document type returned by BSON-decoding functions by providing
``~bson.codec_options.CodecOptions``:

.. code-block:: python
   :emphasize-lines: 2,7,9-10

   >>> from typing import Any, Dict
   >>> from bson import CodecOptions, encode, decode
   >>> class MyDict(Dict[str, Any]):
   ...     def foo(self):
   ...         return "bar"
   ...
   >>> options = CodecOptions(document_class=MyDict)
   >>> doc = {"x": 1, "y": 2}
   >>> bsonbytes = encode(doc, codec_options=options)
   >>> rt_document = decode(bsonbytes, codec_options=options)
   >>> assert rt_document.foo() == "bar"

``~bson.raw_bson.RawBSONDocument`` and ``~typing.TypedDict`` are also supported document
types. Use the following syntax for ``~typing.TypedDict``:

.. code-block:: python
  
   options: CodecOptions[MyTypedDict] = CodecOptions(...)

Troubleshooting
---------------

Client Type Annotations
~~~~~~~~~~~~~~~~~~~~~~~

If you don't add a type annotation for a ``~pymongo.mongo_client.MongoClient`` object,
you might see the following Mypy error:

.. code-block:: python

   from pymongo import MongoClient
   client = MongoClient()  # error: Need type annotation for "client"

The solution is to annotate the type as
``client: MongoClient`` or ``client: MongoClient[Dict[str, Any]]``.

Incompatible Types
~~~~~~~~~~~~~~~~~~

If you use the generic form of ``~pymongo.mongo_client.MongoClient``, you
might see the following Mypy error:

.. code-block:: python

   from pymongo import MongoClient

   client: MongoClient = MongoClient()
   client.test.test.insert_many(
       {"a": 1}
   )  # error: Dict entry 0 has incompatible type "str": "int";
      # expected "Mapping[str, Any]": "int"

The solution is to declare the ``MongoClient`` as shown below:

.. code-block:: python
  
   ``client: MongoClient[Dict[str, Any]]``

You might also see an ``incompatible type`` error if you pass a list to the
``insert_one()`` method, as shown in the following example:

.. code-block:: python

   from pymongo import MongoClient
   from typing import Mapping
   client: MongoClient = MongoClient()
   client.test.test.insert_one(
       [{}]
   )  # error: Argument 1 to "insert_one" of "Collection" has
      # incompatible type "List[Dict[<nothing>, <nothing>]]";
      # expected "Mapping[str, Any]"

The solution is to pass a document, rather than a list, to the ``insert_one({})`` method.

Modifying Raw BSON
~~~~~~~~~~~~~~~~~~

Instances of the ``~bson.raw_bson.RawBSONDocument`` class are read-only.
The following example shows the error you will see if you try to set a value on a
``RawBSONDocument`` object:

.. code-block:: python

   from bson.raw_bson import RawBSONDocument
   from pymongo import MongoClient

   client = MongoClient(document_class=RawBSONDocument)
   coll = client.test.test
   doc = {"my": "doc"}
   coll.insert_one(doc)
   retrieved = coll.find_one({"_id": doc["_id"]})
   assert retrieved is not None
   assert len(retrieved.raw) > 0
   retrieved[
       "foo"
   ] = "bar"  # error: Unsupported target for indexed assignment
              # ("RawBSONDocument")  [index]
